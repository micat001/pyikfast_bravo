/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2024-04-09 16:54:43.082333
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
// #define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
// IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan std::isnan
#endif
#ifndef isinf
#define isinf std::isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[5]);
x6=IKsin(j[3]);
x7=IKcos(j[3]);
x8=IKsin(j[0]);
x9=IKsin(j[5]);
x10=IKsin(j[4]);
x11=IKcos(j[4]);
x12=((9.19237879144087e-5)*x11);
x13=((0.29035)*x3);
x14=((0.15775011)*x8);
x15=((0.21435011)*x8);
x16=((1.1e-7)*x8);
x17=((0.999999995775009)*x11);
x18=((1.0)*x8);
x19=((0.04079975)*x0);
x20=((0.04079975)*x8);
x21=((0.21435011)*x0);
x22=((0.15775011)*x0);
x23=((1.1e-7)*x0);
x24=((0.042)*x8);
x25=((1.0)*x0);
x26=((1.0)*x7);
x27=((0.004)*x1);
x28=((0.999999995775009)*x6);
x29=((0.04079975)*x7);
x30=((9.19237879144087e-5)*x6);
x31=(x2*x3);
x32=(x1*x4);
x33=(x1*x2);
x34=(x0*x6);
x35=(x7*x8);
x36=(x5*x6);
x37=(x6*x9);
x38=((-0.999999995775009)*x11);
x39=(x3*x4);
x40=(x10*x7);
x41=(x0*x7);
x42=(x11*x7);
x43=((9.19237879144087e-5)*x35);
x44=((0.04079975)*x32);
x45=((0.04079975)*x31);
x46=((0.04079975)*x39);
x47=(x0*x39);
x48=(x25*x39);
x49=(x18*x39);
x50=((((-1.0)*x33))+(((1.0)*x39)));
x51=((((-1.0)*x32))+(((-1.0)*x31)));
x52=((((0.999999995775009)*x32))+(((0.999999995775009)*x31)));
x53=((((9.19237879144087e-5)*x32))+(((9.19237879144087e-5)*x31)));
x54=(x44+x45);
x55=(x10*x50);
x56=((((-1.0)*x48))+((x0*x33)));
x57=((((-1.0)*x49))+((x33*x8)));
x58=(x51*x7);
x59=((((-1.0)*x25*x33))+x48);
x60=((((-1.0)*x18*x33))+x49);
x61=(x25*((x32+x31)));
x62=(x18*((x32+x31)));
x63=(x57*x7);
x64=(x56*x7);
x65=(x6*x60);
x66=(x30*x59);
x67=(x10*x61);
x68=(x10*x62);
x69=(((x18*x6))+(((-1.0)*x26*x56)));
x70=((((-1.0)*x25*x6))+(((-1.0)*x26*x57)));
x71=((((-0.999999995775009)*x35))+((x28*x59)));
x72=(x11*x70);
x73=(((x12*x69))+(((9.19237879144087e-5)*x67)));
x74=((((-9.19237879144087e-5)*x68))+(((-1.0)*x12*x70)));
eerot[0]=(((x5*x71))+((x5*x73))+((x9*(((((-1.0)*x43))+x66))))+((x9*((((x38*x69))+(((-0.999999995775009)*x67)))))));
eerot[1]=(((x71*x9))+((x73*x9))+((x5*(((((0.999999995775009)*x67))+((x17*x69))))))+((x5*((x43+(((-1.0)*x66)))))));
eerot[2]=((((-1.0)*x11*x61))+((x10*x69)));
IkReal x75=((1.0)*x39);
IkReal x76=((1.0)*x0);
IkReal x77=((1.0)*x21);
eetrans[0]=((0.0665)+((x10*(((((-0.21435011)*x64))+((x15*x6))))))+(((-6.3e-7)*x8))+(((-1.0)*x13*x76))+((x19*x33))+((x10*((((x19*x32))+((x19*x31))))))+((x11*(((((-1.0)*x31*x77))+(((-1.0)*x32*x77))))))+((x22*x32))+((x22*x31))+(((-1.0)*x27*x76))+((x11*(((((-1.0)*x29*x56))+((x20*x6))))))+(((-0.046)*x0))+((x7*(((((-0.042)*x0*x33))+(((0.042)*x47))))))+((x16*x7))+((x6*((((x23*x33))+(((-1.0)*x23*x75))))))+(((-1.0)*x19*x75))+((x24*x6)));
eerot[3]=(((x5*x74))+((x9*(((((-9.19237879144087e-5)*x65))+(((-9.19237879144087e-5)*x41))))))+((x9*((((x17*x70))+(((0.999999995775009)*x68))))))+((x5*(((((-1.0)*x28*x60))+(((-0.999999995775009)*x41)))))));
eerot[4]=(((x5*(((((-0.999999995775009)*x68))+((x38*x70))))))+((x74*x9))+((x5*(((((9.19237879144087e-5)*x41))+((x30*x60))))))+((x9*(((((-0.999999995775009)*x65))+(((-0.999999995775009)*x41)))))));
eerot[5]=(((x11*x62))+((x10*((x34+x63)))));
IkReal x78=((1.0)*x32);
IkReal x79=((1.0)*x20);
eetrans[1]=(((x10*(((((-1.0)*x20*x78))+(((-1.0)*x31*x79))))))+(((-6.3e-7)*x0))+((x27*x8))+((x7*(((((-1.0)*x24*x39))+((x24*x33))))))+((x20*x39))+(((-1.0)*x33*x79))+(((-1.0)*x14*x31))+((x23*x7))+(((0.046)*x8))+((x11*((((x15*x31))+((x15*x32))))))+(((-1.0)*x14*x78))+((x6*((((x16*x39))+(((-1.0)*x16*x33))))))+((x10*((((x21*x6))+(((0.21435011)*x63))))))+((x13*x8))+((x11*((((x19*x6))+((x29*x57))))))+(((0.042)*x34)));
eerot[6]=(((x37*x53))+((x9*(((((0.999999995775009)*x55))+((x17*x58))))))+((x36*x52))+((x5*(((((-9.19237879144087e-5)*x55))+(((-9.19237879144087e-5)*x42*x51)))))));
eerot[7]=((((-1.0)*x36*x53))+((x37*x52))+((x5*((((x38*x58))+(((-0.999999995775009)*x55))))))+((x9*(((((-9.19237879144087e-5)*x55))+(((-1.0)*x12*x58)))))));
eerot[8]=(((x11*x50))+((x40*((x32+x31)))));
eetrans[2]=((0.1442)+(((-0.15775011)*x39))+(((-0.29035)*x1))+((x42*x54))+((x7*(((((0.042)*x31))+(((0.042)*x32))))))+((x40*(((((0.21435011)*x31))+(((0.21435011)*x32))))))+((x6*(((((-1.1e-7)*x32))+(((-1.1e-7)*x31))))))+(((0.15775011)*x33))+((x11*(((((-0.21435011)*x33))+(((0.21435011)*x39))))))+(((0.004)*x3))+(((-1.0)*x54))+((x10*(((((-1.0)*x46))+(((0.04079975)*x33)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((9.19237879144087e-5)*r00))+(((0.999999995775009)*r01)));
new_r01=((((-9.19237879144087e-5)*r01))+(((0.999999995775009)*r00)));
new_r02=((-1.0)*r02);
new_px=((-0.0665)+(((-0.21435011)*r02))+px);
new_r10=((((-0.999999995775009)*r11))+(((-9.19237879144087e-5)*r10)));
new_r11=((((9.19237879144087e-5)*r11))+(((-0.999999995775009)*r10)));
new_r12=r12;
new_py=((((0.21435011)*r12))+(((-1.0)*py)));
new_r20=((((-9.19237879144087e-5)*r20))+(((-0.999999995775009)*r21)));
new_r21=((((9.19237879144087e-5)*r21))+(((-0.999999995775009)*r20)));
new_r22=r22;
new_pz=((0.1442)+(((0.21435011)*r22))+(((-1.0)*pz)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x80=((1.0)*px);
IkReal x81=((1.0)*pz);
IkReal x82=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x82))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x81)));
rxp0_2=((((-1.0)*r10*x80))+((py*r00)));
rxp1_0=((((-1.0)*r21*x82))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x81)));
rxp1_2=((((-1.0)*r11*x80))+((py*r01)));
rxp2_0=((((-1.0)*r22*x82))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x81))+((px*r22)));
rxp2_2=((((-1.0)*r12*x80))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x83=((0.0121947)*r21);
IkReal x84=((3.09479725e-8)*r11);
IkReal x85=((0.04079975)*py);
IkReal x86=((0.042)*npy);
IkReal x87=((0.0016646196000625)*r10);
IkReal x88=((0.0021)*r01);
IkReal x89=((0.0064361650504725)*r10);
IkReal x90=((0.15775011)*py);
IkReal x91=((0.042)*rxp1_1);
IkReal x92=((0.001764)*r21);
IkReal x93=((1.73525121e-8)*r11);
IkReal x94=((0.0017135895)*r12);
IkReal x95=((0.0121947)*r01);
IkReal x96=((0.084)*rxp0_1);
IkReal x97=((0.0243894)*r00);
IkReal x98=((0.012872330100945)*r11);
IkReal x99=((3.47050242e-8)*r10);
IkReal x100=((0.0243894)*r20);
IkReal x101=((0.084)*npx);
IkReal x102=((0.003329239200125)*r11);
IkReal x103=((6.1895945e-8)*r10);
IkReal x104=((0.0021)*r21);
IkReal x105=((0.001764)*r01);
IkReal x106=((7.3924530298067e-5)*r21);
IkReal x107=((1.11132e-10)*r11);
IkReal x108=((9.068315634e-11)*r22);
IkReal x109=((0.000143941518)*rxp2_0);
IkReal x110=((1.583356698e-11)*r00);
IkReal x111=((3.8808e-10)*px);
IkReal x112=((0.000103164478570058)*r01);
IkReal x113=((0.0010243548)*rxp1_1);
IkReal x114=((4.17934197513e-5)*r12);
IkReal x115=((0.0001764)*npy);
IkReal x116=((2.22264e-9)*rxp1_2);
IkReal x117=((0.000111278878570058)*r21);
IkReal x118=((4.27616247307231e-5)*r10);
IkReal x119=((2.22264e-9)*rxp1_0);
IkReal x120=((1.583356698e-11)*r20);
IkReal x121=((0.000143941518)*rxp2_2);
IkReal x122=((0.000162288)*rxp1_1);
IkReal x123=((3.8808e-10)*pz);
IkReal x124=((0.00104808545961)*py);
IkReal x125=((1.152894005571e-10)*r11);
IkReal x126=((6.621309828e-6)*r12);
IkReal x127=((2.6804209498067e-5)*r01);
IkReal x128=((9.068315634e-11)*r02);
IkReal x129=((3.166713396e-11)*r21);
IkReal x130=((4.44528e-9)*rxp0_0);
IkReal x131=((4.44528e-9)*rxp0_2);
IkReal x132=((3.166713396e-11)*r01);
IkReal x133=((0.0001764)*rxp1_1);
IkReal x134=((2.8510949701933e-5)*r01);
IkReal x135=((0.0010243548)*npy);
IkReal x136=((6.45343524e-10)*r11);
IkReal x137=((7.1970759e-6)*r12);
IkReal x138=((0.000185436937609942)*r21);
IkReal x139=((0.000193551337609942)*r01);
IkReal x140=((0.000162288)*npy);
IkReal x141=((3.1946795985174e-10)*r11);
IkReal x142=((0.003833721816834)*py);
IkReal x143=((1.8609371098067e-5)*r21);
IkReal x144=((0.000156414891696373)*r10);
IkReal x145=((0.0815995)*px);
IkReal x146=((0.003329239200125)*r00);
IkReal x147=((0.0042)*r11);
IkReal x148=((6.1895945e-8)*r01);
IkReal x149=((3.47050242e-8)*r01);
IkReal x150=((0.003427179)*r02);
IkReal x151=((0.0243894)*r11);
IkReal x152=((0.084)*rxp1_0);
IkReal x153=((0.012872330100945)*r00);
IkReal x154=((0.31550022)*px);
IkReal x155=((0.0487788)*r10);
IkReal x156=((0.02574466020189)*r01);
IkReal x157=((6.94100484e-8)*r00);
IkReal x158=((0.168)*rxp0_0);
IkReal x159=((1.2379189e-7)*r00);
IkReal x160=((0.00665847840025)*r01);
IkReal x161=((0.003528)*r11);
IkReal x162=((8.35868395026e-5)*r02);
IkReal x163=((0.000287883036)*rxp2_1);
IkReal x164=((7.7616e-10)*py);
IkReal x165=((0.000206328957140116)*r11);
IkReal x166=((3.166713396e-11)*r10);
IkReal x167=((2.22264e-10)*r01);
IkReal x168=((0.0020487096)*rxp1_0);
IkReal x169=((2.305788011142e-10)*r01);
IkReal x170=((1.3242619656e-5)*r02);
IkReal x171=((4.44528e-9)*rxp1_1);
IkReal x172=((0.00209617091922)*px);
IkReal x173=((0.000324576)*rxp1_0);
IkReal x174=((8.55232494614462e-5)*r00);
IkReal x175=((5.3608418996134e-5)*r11);
IkReal x176=((1.8136631268e-10)*r12);
IkReal x177=((8.89056e-9)*rxp0_1);
IkReal x178=((6.333426792e-11)*r11);
IkReal x179=((5.7021899403866e-5)*r11);
IkReal x180=((1.290687048e-9)*r01);
IkReal x181=((1.43941518e-5)*r02);
IkReal x182=((0.0003528)*rxp1_0);
IkReal x183=((0.000312829783392746)*r00);
IkReal x184=((0.000387102675219884)*r11);
IkReal x185=((0.007667443633668)*px);
IkReal x186=((6.3893591970348e-10)*r01);
IkReal x187=((0.0042)*r00);
IkReal x188=((0.003528)*r20);
IkReal x189=((0.0042)*r20);
IkReal x190=((0.003528)*r00);
IkReal x191=((2.22264e-10)*r10);
IkReal x192=((0.0020487096)*rxp0_1);
IkReal x193=((0.000206328957140116)*r00);
IkReal x194=((0.0003528)*npx);
IkReal x195=((0.000147849060596134)*r20);
IkReal x196=((0.000324576)*rxp0_1);
IkReal x197=((8.55232494614462e-5)*r11);
IkReal x198=((2.305788011142e-10)*r10);
IkReal x199=((0.000222557757140116)*r20);
IkReal x200=((5.3608418996134e-5)*r00);
IkReal x201=((0.0003528)*rxp0_1);
IkReal x202=((5.7021899403866e-5)*r00);
IkReal x203=((0.000370873875219884)*r20);
IkReal x204=((0.0020487096)*npx);
IkReal x205=((1.290687048e-9)*r10);
IkReal x206=((0.000312829783392746)*r11);
IkReal x207=((3.7218742196134e-5)*r20);
IkReal x208=((6.3893591970348e-10)*r10);
IkReal x209=((0.000387102675219884)*r00);
IkReal x210=((0.000324576)*npx);
IkReal x211=((0.003528)*npy);
IkReal x212=((0.007056)*npx);
IkReal x213=((0.007056)*r10);
IkReal x214=(pp*x105);
IkReal x215=(px*x211);
IkReal x216=(pp*x92);
IkReal x217=(pz*x211);
IkReal x218=(pz*x212);
IkReal x219=(pp*x188);
IkReal x220=(pp*x190);
IkReal x221=(px*x212);
IkReal x222=(pp*x161);
IkReal x223=((0.007056)*npy*py);
IkReal x224=(pp*x213);
IkReal x225=((0.014112)*npx*py);
IkReal x226=((9.93825693e-8)+x95);
IkReal x227=((3.03238425e-8)+x86);
IkReal x228=((-6.602938395543e-10)+x124);
IkReal x229=((2.39739306460542e-9)+x143);
IkReal x230=((1.9404e-11)+x108);
IkReal x231=((3.03238425e-8)+x84);
IkReal x232=((3.03238425e-8)+x85);
IkReal x233=((-9.93825693e-8)+x92);
IkReal x234=(x145+x146);
IkReal x235=(x123+x121);
IkReal x236=(x88+x87);
IkReal x237=(x130+x196);
IkReal x238=(x131+x194);
IkReal x239=(x137+x128);
IkReal x240=(x160+x159);
IkReal x241=(x171+x169);
IkReal x242=(x161+x148);
IkReal x243=(x97+x96);
IkReal x244=(x157+x156);
IkReal x245=(x105+x87);
IkReal x246=(x154+x149);
IkReal x247=(x143+x108);
IkReal x248=(x142+x144);
IkReal x249=(x93+x94);
IkReal x250=(x147+x148);
IkReal x251=(x86+x85);
IkReal x252=(x84+x85);
IkReal x253=(x111+x109);
IkReal x254=(x135+x136);
IkReal x255=(x172+x176);
IkReal x256=(x126+x128);
IkReal x257=(x99+x98);
IkReal x258=(x86+x84);
IkReal x259=(x102+x103);
IkReal x260=(x163+x164);
IkReal x261=(x131+x210);
IkReal x262=(x90+x93);
IkReal x263=(x150+x149);
IkReal x264=(x166+x222);
IkReal x265=(x129+x218);
IkReal x266=(x199+x219);
IkReal x267=((2.39739306460542e-9)+x140+x116);
IkReal x268=(x120+x216);
IkReal x269=(x110+x214);
IkReal x270=(x132+x221);
IkReal x271=(x138+x217);
IkReal x272=(x219+x204);
IkReal x273=(x106+x215);
IkReal x274=(x178+x225);
IkReal x275=(x89+x91+x94);
IkReal x276=(x153+x152+x150);
IkReal x277=(x101+x259);
IkReal x278=(x198+x197+x200);
IkReal x279=(x173+x175+x174);
IkReal x280=(x162+x260);
IkReal x281=(x134+x133+x119);
IkReal x282=(x154+x153+x152);
IkReal x283=(x140+x116+x108);
IkReal x284=(x89+x91+x90);
IkReal x285=(x206+x209+x208);
IkReal x286=(x127+x125+x117);
IkReal x287=(x179+x171+x180);
IkReal x288=(x130+x202+x201);
IkReal x289=(x136+x271);
IkReal x290=(x127+x125+x217);
IkReal x291=(x141+x139+x215);
IkReal x292=(x168+x167+x223);
IkReal x293=(x116+x115+x215);
IkReal x294=(x184+x183+x223);
IkReal x295=(x122+x117+x119+x118);
IkReal x296=(x113+x112+x106+x107);
IkReal x297=(x193+x192+x191+x220);
IkReal x298=(x253+x269);
IkReal x299=(x122+x119+x118+x217);
IkReal x300=(x113+x112+x116+x115+x107);
op[0]=(x227+x236+(((-1.0)*x83))+(((-1.0)*x252)));
op[1]=((-9.93825693e-8)+x262+x95+(((-1.0)*x92))+(((-1.0)*x275)));
op[2]=((((-1.0)*x100))+x101+x187+(((-1.0)*x259)));
op[3]=((((-1.0)*x188))+x257+x97+(((-1.0)*x96)));
op[4]=((((-1.0)*x236))+x231+x83+(((-1.0)*x251)));
op[5]=(x233+x284+(((-1.0)*x95))+(((-1.0)*x249)));
op[6]=(x104+x226+x275+(((-1.0)*x262)));
op[7]=(x227+x245+x83+(((-1.0)*x252)));
op[8]=(x189+x243+(((-1.0)*x257)));
op[9]=(x100+x101+x190+(((-1.0)*x259)));
op[10]=((9.93825693e-8)+(((-1.0)*x104))+x249+(((-1.0)*x95))+(((-1.0)*x284)));
op[11]=(x231+(((-1.0)*x245))+(((-1.0)*x83))+(((-1.0)*x251)));
op[12]=((((-1.0)*x296))+(((-1.0)*x114))+x253+x230+x293+(((-1.0)*x269)));
op[13]=((((-1.0)*x295))+x228+x235+x290+(((-1.0)*x268))+(((-1.0)*x256)));
op[14]=((((-1.0)*x297))+(((-1.0)*x195))+x238+x270);
op[15]=((((-1.0)*x237))+x265+x278+(((-1.0)*x266)));
op[16]=((((-1.0)*x293))+(((-1.0)*x114))+x230+x298+x296);
op[17]=((((-1.0)*x290))+x228+x235+x295+x268+(((-1.0)*x256)));
op[18]=((-1.12679028e-10)+(((-1.0)*x135))+(((-1.0)*x239))+x235+x289+(((-1.0)*x281))+(((-1.0)*x268)));
op[19]=((((-1.0)*x142))+(((-1.0)*x291))+x144+x229+x269+(((-1.0)*x283))+(((-1.0)*x253)));
op[20]=(x205+x203+x265+(((-1.0)*x272))+(((-1.0)*x288)));
op[21]=(x220+x207+(((-1.0)*x270))+(((-1.0)*x285))+(((-1.0)*x261)));
op[22]=((-1.12679028e-10)+x135+(((-1.0)*x239))+x235+x268+x281+(((-1.0)*x289)));
op[23]=((((-1.0)*x298))+x291+x267+(((-1.0)*x247))+(((-1.0)*x248)));
op[24]=((((-1.0)*x146))+x145+x250);
op[25]=(x151+x276+(((-1.0)*x246)));
op[26]=(x240+(((0.0084)*r10)));
op[27]=(x155+x158+(((-1.0)*x244)));
op[28]=(x234+(((-1.0)*x250)));
op[29]=((((-1.0)*x151))+x263+(((-1.0)*x282)));
op[30]=(x151+x246+(((-1.0)*x276)));
op[31]=((((-1.0)*x146))+x145+x242);
op[32]=((((-1.0)*x158))+x155+x244);
op[33]=(x213+x240);
op[34]=((((-1.0)*x151))+x282+(((-1.0)*x263)));
op[35]=(x234+(((-1.0)*x242)));
op[36]=((((-1.0)*x165))+x292+x280+(((-1.0)*x264)));
op[37]=(x170+x279+(((-1.0)*x241))+(((-1.0)*x255)));
op[38]=((((0.0040974192)*rxp0_0))+(((4.44528e-10)*r00))+x274+(((-0.000412657914280232)*r10))+(((-1.0)*x224)));
op[39]=((((-1.0)*x177))+(((0.000107216837992268)*r10))+(((-0.000171046498922892)*r01))+(((0.000649152)*rxp0_0))+(((-4.611576022284e-10)*r00)));
op[40]=((((-1.0)*x292))+x165+x264+x280);
op[41]=(x170+x241+(((-1.0)*x279))+(((-1.0)*x255)));
op[42]=((((-1.0)*x176))+x181+x182+(((-1.0)*x287)));
op[43]=((((-1.0)*x294))+x185+x186+x264+(((-1.0)*x260)));
op[44]=((((-1.0)*x177))+(((-0.000114043798807732)*r10))+(((-2.581374096e-9)*r00))+(((0.0007056)*rxp0_0)));
op[45]=((((0.000625659566785492)*r01))+(((-0.000774205350439768)*r10))+x224+(((-1.0)*x274))+(((1.27787183940696e-9)*r00)));
op[46]=((((-1.0)*x176))+(((-1.0)*x182))+x181+x287);
op[47]=((((-1.0)*x186))+x185+x294+(((-1.0)*x264))+(((-1.0)*x260)));
op[48]=((((-1.0)*x236))+x252+x227+(((-1.0)*x83)));
op[49]=((-9.93825693e-8)+x275+(((-1.0)*x95))+(((-1.0)*x92))+(((-1.0)*x262)));
op[50]=((((-1.0)*x187))+(((-1.0)*x100))+x277);
op[51]=((((-1.0)*x188))+x96+(((-1.0)*x97))+(((-1.0)*x257)));
op[52]=(x232+x236+x83+(((-1.0)*x258)));
op[53]=(x233+x249+x95+(((-1.0)*x284)));
op[54]=((9.93825693e-8)+x104+x262+(((-1.0)*x95))+(((-1.0)*x275)));
op[55]=(x252+x227+x83+(((-1.0)*x245)));
op[56]=(x189+x257+(((-1.0)*x243)));
op[57]=((((-1.0)*x190))+x100+x277);
op[58]=((((-1.0)*x104))+x226+x284+(((-1.0)*x249)));
op[59]=(x232+x245+(((-1.0)*x83))+(((-1.0)*x258)));
op[60]=(x114+x300+x230+x269+(((-1.0)*x273))+(((-1.0)*x253)));
op[61]=((-6.602938395543e-10)+(((-1.0)*x124))+x256+x235+x299+(((-1.0)*x286))+(((-1.0)*x268)));
op[62]=((((-1.0)*x195))+x238+x297+(((-1.0)*x270)));
op[63]=(x237+x265+(((-1.0)*x278))+(((-1.0)*x266)));
op[64]=((((-1.0)*x298))+x114+x230+x273+(((-1.0)*x300)));
op[65]=((-6.602938395543e-10)+(((-1.0)*x299))+(((-1.0)*x124))+x256+x235+x268+x286);
op[66]=((-1.12679028e-10)+x239+x235+x271+x281+(((-1.0)*x268))+(((-1.0)*x254)));
op[67]=((((-1.0)*x144))+x142+x253+x229+x291+(((-1.0)*x283))+(((-1.0)*x269)));
op[68]=((((-1.0)*x205))+x203+x265+x288+(((-1.0)*x272)));
op[69]=(x207+x270+x285+(((-1.0)*x261))+(((-1.0)*x220)));
op[70]=((-1.12679028e-10)+x254+x239+x235+x268+(((-1.0)*x271))+(((-1.0)*x281)));
op[71]=((((-1.0)*x291))+x298+x267+x248+(((-1.0)*x247)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j0array[16], cj0array[16], sj0array[16], j5array[16], cj5array[16], sj5array[16], j1array[16], cj1array[16], sj1array[16];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ij0 += 3)
{
IkReal htj0 = zeror[ij0+0], htj5 = zeror[ij0+1], htj1 = zeror[ij0+2];
if(isnan(htj0)||isnan(htj5)||isnan(htj1)){
continue;
}
j0array[numsolutions]=((2.0)*(atan(htj0)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j1array[numsolutions]=((2.0)*(atan(htj1)));
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x301=htj0*htj0;
CheckValue<IkReal> x302=IKPowWithIntegerCheck(((1.0)+x301),-1);
if(!x302.valid){
continue;
}
cj0array[numsolutions]=((x302.value)*(((1.0)+(((-1.0)*x301)))));
CheckValue<IkReal> x303=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x303.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x303.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x304=htj5*htj5;
CheckValue<IkReal> x305=IKPowWithIntegerCheck(((1.0)+x304),-1);
if(!x305.valid){
continue;
}
cj5array[numsolutions]=((x305.value)*(((1.0)+(((-1.0)*x304)))));
CheckValue<IkReal> x306=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x306.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x306.value));
}
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x307=htj1*htj1;
CheckValue<IkReal> x308=IKPowWithIntegerCheck(((1.0)+x307),-1);
if(!x308.valid){
continue;
}
cj1array[numsolutions]=((x308.value)*(((1.0)+(((-1.0)*x307)))));
CheckValue<IkReal> x309=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x309.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x309.value));
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j0valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj0 = 16;
_nj5 = 1;
_nj1 = 1;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij1[0] = 0; _ij1[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( !j0valid[iij0] ) { continue; }
if( IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij0]-cj5array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij0]-sj5array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj1array[ij0]-cj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij0]-sj1array[iij0]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j0valid[iij0]=false; _ij0[1] = iij0; _ij5[1] = 0; _ij1[1] = 0;  break; 
}
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

    j5 = j5array[ij0]; cj5 = cj5array[ij0]; sj5 = sj5array[ij0];

    j1 = j1array[ij0]; cj1 = cj1array[ij0]; sj1 = sj1array[ij0];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x310=(sj0*sj5);
IkReal x311=(cj0*r10);
IkReal x312=(cj5*sj0);
IkReal x313=(cj0*cj5*r11);
if( IKabs(((1.5e-5)+(((0.971422619047619)*cj5*x311))+(((-0.971422619047619)*r00*x312))+(((2.61904761904762e-6)*r01*x312))+(((2.61904761904762e-6)*r00*x310))+(((-23.8095238095238)*cj0*py))+(((-0.971422619047619)*cj0*r11*sj5))+(((-2.61904761904762e-6)*x313))+(((0.971422619047619)*r01*x310))+(((23.8095238095238)*px*sj0))+(((-2.61904761904762e-6)*sj5*x311)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x310))+(((-1.0)*r01*x312))+x313+((sj5*x311)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.5e-5)+(((0.971422619047619)*cj5*x311))+(((-0.971422619047619)*r00*x312))+(((2.61904761904762e-6)*r01*x312))+(((2.61904761904762e-6)*r00*x310))+(((-23.8095238095238)*cj0*py))+(((-0.971422619047619)*cj0*r11*sj5))+(((-2.61904761904762e-6)*x313))+(((0.971422619047619)*r01*x310))+(((23.8095238095238)*px*sj0))+(((-2.61904761904762e-6)*sj5*x311))))+IKsqr(((((-1.0)*r00*x310))+(((-1.0)*r01*x312))+x313+((sj5*x311))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((1.5e-5)+(((0.971422619047619)*cj5*x311))+(((-0.971422619047619)*r00*x312))+(((2.61904761904762e-6)*r01*x312))+(((2.61904761904762e-6)*r00*x310))+(((-23.8095238095238)*cj0*py))+(((-0.971422619047619)*cj0*r11*sj5))+(((-2.61904761904762e-6)*x313))+(((0.971422619047619)*r01*x310))+(((23.8095238095238)*px*sj0))+(((-2.61904761904762e-6)*sj5*x311))), ((((-1.0)*r00*x310))+(((-1.0)*r01*x312))+x313+((sj5*x311))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x314=IKcos(j3);
IkReal x315=(sj0*sj5);
IkReal x316=((0.04079975)*cj5);
IkReal x317=(cj0*r11);
IkReal x318=(cj0*r10);
evalcond[0]=(((cj5*r01*sj0))+x314+((r00*x315))+(((-1.0)*sj5*x318))+(((-1.0)*cj5*x317)));
evalcond[1]=((-6.3e-7)+((r00*sj0*x316))+(((1.1e-7)*x314))+(((0.042)*(IKsin(j3))))+(((-0.04079975)*r01*x315))+(((-1.0)*px*sj0))+((cj0*py))+(((0.04079975)*sj5*x317))+(((-1.0)*x316*x318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x319=cj5*cj5;
IkReal x320=cj0*cj0;
IkReal x321=r01*r01;
IkReal x322=r00*r00;
IkReal x323=r11*r11;
IkReal x324=r02*r02;
IkReal x325=(cj0*sj3);
IkReal x326=(cj5*sj5);
IkReal x327=((2.0)*r11);
IkReal x328=(r00*sj0);
IkReal x329=(r02*sj0);
IkReal x330=((1.0)*x319);
IkReal x331=(cj0*r01*sj0);
IkReal x332=((2.0)*r00*r01);
IkReal x333=((2.0)*cj0*r10*sj0);
IkReal x334=(x320*x323);
IkReal x335=(x320*x321);
IkReal x336=((((-1.0)*x320*(r12*r12)))+(((-1.0)*x319*x327*x331))+((r10*x320*x326*x327))+(((-1.0)*cj0*x326*x327*x328))+(((2.0)*cj0*r12*x329))+((x320*x324))+((x319*x320*x322))+((x319*x334))+(((-1.0)*x320*x326*x332))+(((-1.0)*x321))+(((-1.0)*x324))+(((-2.0)*r10*x326*x331))+x335+(((-1.0)*x334))+(((-1.0)*x330*x335))+((x327*x331))+(((-1.0)*x322*x330))+((x326*x332))+(((2.0)*cj0*r10*x319*x328))+(((-1.0)*x320*x330*(r10*r10)))+((x319*x321)));
j4eval[0]=x336;
j4eval[1]=IKsign(x336);
j4eval[2]=((IKabs(((((-1.0)*r12*x325))+((sj3*x329)))))+(IKabs(((((-1.0)*r11*sj5*x325))+(((-1.0)*cj5*sj3*x328))+((r01*sj0*sj3*sj5))+((cj5*r10*x325))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x337=cj3*cj3;
IkReal x338=(cj3*sj3);
j2eval[0]=((-1.0)+(((381818.181818182)*x338))+x337+(((-370906.818181818)*sj3)));
j2eval[1]=IKsign(((-1.1e-7)+(((-0.04079975)*sj3))+(((1.1e-7)*x337))+(((0.042)*x338))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x339=(sj0*sj1);
IkReal x340=((0.0482288862115347)*py);
IkReal x341=((0.258620347309223)*cj1);
IkReal x342=((0.00196772650020906)*sj1);
IkReal x343=((0.00196772650020906)*cj1);
IkReal x344=(r21*sj5);
IkReal x345=((0.258620347309223)*sj1);
IkReal x346=(cj0*px);
IkReal x347=((0.0482288862115347)*cj1);
IkReal x348=(cj5*r10);
IkReal x349=(r11*sj5);
IkReal x350=(cj5*r20);
IkReal x351=((6.33877284319691)*sj1);
IkReal x352=(cj1*sj0);
IkReal x353=((6.33877284319691)*py);
IkReal x354=((0.0482288862115347)*sj1);
IkReal x355=((6.33877284319691)*cj1);
IkReal x356=(cj0*r01*sj5);
IkReal x357=(cj0*cj5*r00);
if( IKabs(((0.0393583484843067)+(((0.291583550787058)*cj1))+(((-1.0)*x345*x350))+(((-1.0)*sj0*x341*x348))+((x346*x355))+((x346*x354))+((x341*x356))+((x352*x353))+(((-1.0)*x341*x357))+((pz*x351))+(((-0.00196772650020906)*x339*x348))+((x344*x345))+((x342*x356))+(((0.0022185287657306)*sj1))+(((-1.0)*x342*x357))+((x343*x350))+(((-1.0)*x343*x344))+(((0.00196772650020906)*x339*x349))+((x339*x340))+((sj0*x341*x349))+(((-1.0)*pz*x347)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.84026977947738)+((x345*x356))+(((-0.258620347309223)*x339*x348))+(((-1.0)*x345*x357))+(((0.291583550787058)*sj1))+((x346*x351))+((x341*x350))+(((-1.0)*x343*x356))+((x342*x350))+((sj0*x343*x348))+(((-1.0)*sj0*x343*x349))+((x343*x357))+(((-1.0)*x341*x344))+(((-1.0)*x346*x347))+(((-1.0)*x340*x352))+(((-1.0)*x342*x344))+(((-0.0022185287657306)*cj1))+((x339*x353))+(((-1.0)*pz*x355))+(((-1.0)*pz*x354))+(((0.258620347309223)*x339*x349)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0393583484843067)+(((0.291583550787058)*cj1))+(((-1.0)*x345*x350))+(((-1.0)*sj0*x341*x348))+((x346*x355))+((x346*x354))+((x341*x356))+((x352*x353))+(((-1.0)*x341*x357))+((pz*x351))+(((-0.00196772650020906)*x339*x348))+((x344*x345))+((x342*x356))+(((0.0022185287657306)*sj1))+(((-1.0)*x342*x357))+((x343*x350))+(((-1.0)*x343*x344))+(((0.00196772650020906)*x339*x349))+((x339*x340))+((sj0*x341*x349))+(((-1.0)*pz*x347))))+IKsqr(((1.84026977947738)+((x345*x356))+(((-0.258620347309223)*x339*x348))+(((-1.0)*x345*x357))+(((0.291583550787058)*sj1))+((x346*x351))+((x341*x350))+(((-1.0)*x343*x356))+((x342*x350))+((sj0*x343*x348))+(((-1.0)*sj0*x343*x349))+((x343*x357))+(((-1.0)*x341*x344))+(((-1.0)*x346*x347))+(((-1.0)*x340*x352))+(((-1.0)*x342*x344))+(((-0.0022185287657306)*cj1))+((x339*x353))+(((-1.0)*pz*x355))+(((-1.0)*pz*x354))+(((0.258620347309223)*x339*x349))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((0.0393583484843067)+(((0.291583550787058)*cj1))+(((-1.0)*x345*x350))+(((-1.0)*sj0*x341*x348))+((x346*x355))+((x346*x354))+((x341*x356))+((x352*x353))+(((-1.0)*x341*x357))+((pz*x351))+(((-0.00196772650020906)*x339*x348))+((x344*x345))+((x342*x356))+(((0.0022185287657306)*sj1))+(((-1.0)*x342*x357))+((x343*x350))+(((-1.0)*x343*x344))+(((0.00196772650020906)*x339*x349))+((x339*x340))+((sj0*x341*x349))+(((-1.0)*pz*x347))), ((1.84026977947738)+((x345*x356))+(((-0.258620347309223)*x339*x348))+(((-1.0)*x345*x357))+(((0.291583550787058)*sj1))+((x346*x351))+((x341*x350))+(((-1.0)*x343*x356))+((x342*x350))+((sj0*x343*x348))+(((-1.0)*sj0*x343*x349))+((x343*x357))+(((-1.0)*x341*x344))+(((-1.0)*x346*x347))+(((-1.0)*x340*x352))+(((-1.0)*x342*x344))+(((-0.0022185287657306)*cj1))+((x339*x353))+(((-1.0)*pz*x355))+(((-1.0)*pz*x354))+(((0.258620347309223)*x339*x349))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x358=IKcos(j2);
IkReal x359=IKsin(j2);
IkReal x360=((0.00120025)*cj1);
IkReal x361=((0.04079975)*cj5);
IkReal x362=((0.04079975)*sj5);
IkReal x363=(sj1*x359);
IkReal x364=((0.15775011)*x358);
evalcond[0]=((((-0.29035)*cj1))+(((-1.0)*r20*x361))+(((-0.15775011)*x363))+(((0.00120025)*sj1*x358))+((x359*x360))+(((0.004)*sj1))+((cj1*x364))+pz+((r21*x362)));
evalcond[1]=((0.046)+(((-0.15775011)*cj1*x359))+((x358*x360))+(((-1.0)*sj1*x364))+((cj0*r01*x362))+(((-1.0)*cj0*r00*x361))+(((0.004)*cj1))+(((0.29035)*sj1))+(((-1.0)*r10*sj0*x361))+((cj0*px))+((py*sj0))+(((-0.00120025)*x363))+((r11*sj0*x362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x365=r21*r21;
IkReal x366=cj5*cj5;
IkReal x367=((((2.0)*cj5*r20*r21*sj5))+(((-1.0)*x365))+(((-1.0)*x366*(r20*r20)))+((x365*x366))+(((-1.0)*(r22*r22))));
j4eval[0]=x367;
j4eval[1]=IKsign(x367);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x368=((1.0)*sj0);
IkReal x369=((1.0)*cj0);
IkReal x370=((((-1.0)*r00*sj5*x369))+(((-1.0)*r10*sj5*x368))+(((-1.0)*cj5*r01*x369))+(((-1.0)*cj5*r11*x368)));
j4eval[0]=x370;
j4eval[1]=IKsign(x370);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x371=cj5*cj5;
IkReal x372=(cj0*r11);
IkReal x373=((1.0)*sj0);
IkReal x374=(cj0*r10);
IkReal x375=(cj5*r20*sj5);
IkReal x376=(r21*x371);
IkReal x377=(cj5*r21*sj5);
IkReal x378=(r20*x371);
IkReal x379=((((-1.0)*r00*x373*x377))+(((-1.0)*r01*x373*x376))+(((-1.0)*r01*x373*x375))+((x372*x375))+((x372*x376))+((r01*r21*sj0))+(((-1.0)*x374*x378))+((r00*sj0*x378))+(((-1.0)*cj0*r12*r22))+(((-1.0)*r21*x372))+((x374*x377))+((r02*r22*sj0)));
j4eval[0]=x379;
j4eval[1]=IKsign(x379);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x380=cj5*cj5;
IkReal x381=((1.0)*sj0);
IkReal x382=(cj1*cj2);
IkReal x383=(cj0*r11);
IkReal x384=(cj5*sj5);
IkReal x385=(sj1*sj2);
IkReal x386=(r00*sj0);
IkReal x387=(r02*sj0);
IkReal x388=(cj0*r10);
IkReal x389=(r01*sj0);
IkReal x390=(r21*x380);
IkReal x391=(sj5*x385);
IkReal x392=((1.0)*cj0*r12);
IkReal x393=((1.0)*x388);
IkReal x394=(r20*x380);
CheckValue<IkReal> x395=IKPowWithIntegerCheck(IKsign((((r22*x387))+((r21*x384*x388))+(((-1.0)*r00*r21*x381*x384))+((r21*x389))+(((-1.0)*r22*x392))+(((-1.0)*x393*x394))+((x386*x394))+(((-1.0)*r01*r20*x381*x384))+((x383*x390))+((r20*x383*x384))+(((-1.0)*r01*x381*x390))+(((-1.0)*r21*x383)))),-1);
if(!x395.valid){
continue;
}
CheckValue<IkReal> x396 = IKatan2WithCheck(IkReal((((sj5*x382*x389))+(((-1.0)*sj5*x382*x383))+((cj5*x382*x388))+(((-1.0)*cj5*r00*x381*x382))+((cj5*x385*x386))+(((-1.0)*cj5*x385*x393))+((x383*x391))+(((-1.0)*r01*x381*x391)))),IkReal((((cj0*r12*x382))+(((-1.0)*x385*x392))+((x385*x387))+(((-1.0)*r02*x381*x382)))),IKFAST_ATAN2_MAGTHRESH);
if(!x396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x395.value)))+(x396.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x397=IKsin(j4);
IkReal x398=IKcos(j4);
IkReal x399=(sj1*sj2);
IkReal x400=(cj5*r00);
IkReal x401=((1.0)*cj1);
IkReal x402=(cj5*r10);
IkReal x403=(cj2*sj1);
IkReal x404=(r01*sj5);
IkReal x405=(cj5*r20);
IkReal x406=(cj2*x401);
IkReal x407=((1.0)*x398);
IkReal x408=(cj0*x397);
IkReal x409=(sj5*x398);
IkReal x410=(sj0*x398);
IkReal x411=(sj0*x397);
IkReal x412=(sj5*x411);
evalcond[0]=((((-1.0)*x397*x405))+x399+((r21*sj5*x397))+(((-1.0)*x406))+(((-1.0)*r22*x407)));
evalcond[1]=(((r22*x397))+((r21*x409))+(((-1.0)*x405*x407))+(((-1.0)*sj2*x401))+(((-1.0)*x403)));
evalcond[2]=((((-1.0)*x402*x408))+((r11*sj5*x408))+(((-1.0)*x404*x411))+((x400*x411))+((r02*x410))+(((-1.0)*cj0*r12*x407)));
evalcond[3]=(((r12*x408))+(((-1.0)*sj0*x404*x407))+(((-1.0)*r02*x411))+(((-1.0)*cj0*x402*x407))+((x400*x410))+((cj0*r11*x409)));
evalcond[4]=(((cj0*x398*x404))+(((-1.0)*sj0*x402*x407))+((r12*x411))+x399+((r11*sj0*x409))+(((-1.0)*x406))+(((-1.0)*cj0*x400*x407))+((r02*x408)));
evalcond[5]=((((-1.0)*x402*x411))+((r11*x412))+((x404*x408))+((cj1*sj2))+(((-1.0)*cj0*r02*x407))+x403+(((-1.0)*r12*sj0*x407))+(((-1.0)*x400*x408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x413=(cj1*cj2);
IkReal x414=(cj0*sj5);
IkReal x415=(cj5*sj0);
IkReal x416=((1.0)*r11);
IkReal x417=(r02*sj0);
IkReal x418=(sj1*sj2);
IkReal x419=((1.0)*cj0);
IkReal x420=(cj5*r10);
IkReal x421=((1.0)*r00);
IkReal x422=((1.0)*sj0*sj5);
CheckValue<IkReal> x423=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01*x419))+(((-1.0)*x415*x416))+(((-1.0)*x414*x421))+(((-1.0)*r10*x422)))),-1);
if(!x423.valid){
continue;
}
CheckValue<IkReal> x424 = IKatan2WithCheck(IkReal(((((-1.0)*x413*x417))+((x417*x418))+(((-1.0)*r12*x418*x419))+((cj0*r12*x413)))),IkReal(((((-1.0)*x415*x418*x421))+((cj0*x418*x420))+(((-1.0)*r01*x413*x422))+(((-1.0)*x414*x416*x418))+((r00*x413*x415))+((r01*sj0*sj5*x418))+(((-1.0)*x413*x419*x420))+((r11*x413*x414)))),IKFAST_ATAN2_MAGTHRESH);
if(!x424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x423.value)))+(x424.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x425=IKsin(j4);
IkReal x426=IKcos(j4);
IkReal x427=(sj1*sj2);
IkReal x428=(cj5*r00);
IkReal x429=((1.0)*cj1);
IkReal x430=(cj5*r10);
IkReal x431=(cj2*sj1);
IkReal x432=(r01*sj5);
IkReal x433=(cj5*r20);
IkReal x434=(cj2*x429);
IkReal x435=((1.0)*x426);
IkReal x436=(cj0*x425);
IkReal x437=(sj5*x426);
IkReal x438=(sj0*x426);
IkReal x439=(sj0*x425);
IkReal x440=(sj5*x439);
evalcond[0]=((((-1.0)*x434))+(((-1.0)*x425*x433))+x427+((r21*sj5*x425))+(((-1.0)*r22*x435)));
evalcond[1]=((((-1.0)*sj2*x429))+(((-1.0)*x433*x435))+(((-1.0)*x431))+((r21*x437))+((r22*x425)));
evalcond[2]=((((-1.0)*cj0*r12*x435))+((x428*x439))+((r02*x438))+((r11*sj5*x436))+(((-1.0)*x430*x436))+(((-1.0)*x432*x439)));
evalcond[3]=((((-1.0)*r02*x439))+((r12*x436))+(((-1.0)*sj0*x432*x435))+((x428*x438))+(((-1.0)*cj0*x430*x435))+((cj0*r11*x437)));
evalcond[4]=(((r12*x439))+(((-1.0)*x434))+(((-1.0)*cj0*x428*x435))+((r02*x436))+(((-1.0)*sj0*x430*x435))+x427+((cj0*x426*x432))+((r11*sj0*x437)));
evalcond[5]=((((-1.0)*cj0*r02*x435))+((cj1*sj2))+(((-1.0)*x428*x436))+(((-1.0)*r12*sj0*x435))+x431+((r11*x440))+((x432*x436))+(((-1.0)*x430*x439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x441=r21*r21;
IkReal x442=cj5*cj5;
IkReal x443=(cj1*sj2);
IkReal x444=((1.0)*r22);
IkReal x445=(cj5*r20);
IkReal x446=(r21*sj5);
IkReal x447=(sj1*sj2);
IkReal x448=(cj1*cj2);
IkReal x449=(cj2*sj1);
CheckValue<IkReal> x450 = IKatan2WithCheck(IkReal((((x446*x447))+(((-1.0)*x444*x449))+(((-1.0)*x443*x444))+(((-1.0)*x445*x447))+(((-1.0)*x446*x448))+((x445*x448)))),IkReal(((((-1.0)*x444*x447))+(((-1.0)*x446*x449))+((r22*x448))+((x445*x449))+(((-1.0)*x443*x446))+((x443*x445)))),IKFAST_ATAN2_MAGTHRESH);
if(!x450.valid){
continue;
}
CheckValue<IkReal> x451=IKPowWithIntegerCheck(IKsign(((((-1.0)*x441))+((x441*x442))+(((-1.0)*r22*x444))+(((2.0)*x445*x446))+(((-1.0)*x442*(r20*r20))))),-1);
if(!x451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x450.value)+(((1.5707963267949)*(x451.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x452=IKsin(j4);
IkReal x453=IKcos(j4);
IkReal x454=(sj1*sj2);
IkReal x455=(cj5*r00);
IkReal x456=((1.0)*cj1);
IkReal x457=(cj5*r10);
IkReal x458=(cj2*sj1);
IkReal x459=(r01*sj5);
IkReal x460=(cj5*r20);
IkReal x461=(cj2*x456);
IkReal x462=((1.0)*x453);
IkReal x463=(cj0*x452);
IkReal x464=(sj5*x453);
IkReal x465=(sj0*x453);
IkReal x466=(sj0*x452);
IkReal x467=(sj5*x466);
evalcond[0]=(((r21*sj5*x452))+(((-1.0)*x452*x460))+(((-1.0)*x461))+x454+(((-1.0)*r22*x462)));
evalcond[1]=((((-1.0)*x458))+(((-1.0)*x460*x462))+(((-1.0)*sj2*x456))+((r21*x464))+((r22*x452)));
evalcond[2]=((((-1.0)*x457*x463))+((r11*sj5*x463))+(((-1.0)*x459*x466))+((x455*x466))+(((-1.0)*cj0*r12*x462))+((r02*x465)));
evalcond[3]=(((x455*x465))+(((-1.0)*r02*x466))+((r12*x463))+(((-1.0)*cj0*x457*x462))+((cj0*r11*x464))+(((-1.0)*sj0*x459*x462)));
evalcond[4]=(((cj0*x453*x459))+((r11*sj0*x464))+(((-1.0)*x461))+((r12*x466))+x454+((r02*x463))+(((-1.0)*sj0*x457*x462))+(((-1.0)*cj0*x455*x462)));
evalcond[5]=((((-1.0)*x457*x466))+((cj1*sj2))+(((-1.0)*r12*sj0*x462))+x458+(((-1.0)*x455*x463))+((r11*x467))+((x459*x463))+(((-1.0)*cj0*r02*x462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x468=(sj0*sj1);
IkReal x469=((0.106430805255421)*cj5);
IkReal x470=(r11*sj5);
IkReal x471=(cj1*r20);
IkReal x472=(cj1*sj0);
IkReal x473=((4.96993251131808)*py);
IkReal x474=(cj0*sj1);
IkReal x475=((2.60861415218037)*px);
IkReal x476=((0.20277200397865)*sj5);
IkReal x477=(r21*sj1);
IkReal x478=(pz*sj1);
IkReal x479=((2.60861415218037)*py);
IkReal x480=(cj0*cj1);
IkReal x481=(cj1*pz);
IkReal x482=(r20*sj1);
IkReal x483=((4.96993251131808)*px);
IkReal x484=(cj1*r21);
IkReal x485=((0.20277200397865)*cj5);
IkReal x486=((0.106430805255421)*sj5);
IkReal x487=(r10*x485);
if( IKabs(((-0.737531389040297)+((x484*x486))+(((-1.0)*r01*x474*x486))+((x472*x473))+(((-1.0)*x468*x479))+(((2.60861415218037)*x481))+(((-1.0)*x469*x471))+(((4.96993251131808)*x478))+((r00*x469*x474))+(((0.228616895520632)*cj1))+((r10*x468*x469))+((x480*x483))+(((-0.119996251000297)*sj1))+(((-1.0)*x482*x485))+(((-1.0)*x474*x475))+(((-1.0)*r00*x480*x485))+((x476*x477))+(((-0.106430805255421)*x468*x470))+(((0.20277200397865)*x470*x472))+((r01*x476*x480))+(((-1.0)*x472*x487)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.45345436126993)+((x471*x485))+(((0.20277200397865)*x468*x470))+(((-1.0)*x476*x484))+((x472*x479))+(((0.228616895520632)*sj1))+((x475*x480))+((r01*x474*x476))+(((0.119996251000297)*cj1))+(((0.106430805255421)*x470*x472))+(((-4.96993251131808)*x481))+(((-1.0)*r00*x474*x485))+(((-1.0)*x469*x482))+((r01*x480*x486))+((x474*x483))+(((-1.0)*r00*x469*x480))+(((-1.0)*r10*x469*x472))+(((-1.0)*x468*x487))+(((2.60861415218037)*x478))+((x468*x473))+((x477*x486)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.737531389040297)+((x484*x486))+(((-1.0)*r01*x474*x486))+((x472*x473))+(((-1.0)*x468*x479))+(((2.60861415218037)*x481))+(((-1.0)*x469*x471))+(((4.96993251131808)*x478))+((r00*x469*x474))+(((0.228616895520632)*cj1))+((r10*x468*x469))+((x480*x483))+(((-0.119996251000297)*sj1))+(((-1.0)*x482*x485))+(((-1.0)*x474*x475))+(((-1.0)*r00*x480*x485))+((x476*x477))+(((-0.106430805255421)*x468*x470))+(((0.20277200397865)*x470*x472))+((r01*x476*x480))+(((-1.0)*x472*x487))))+IKsqr(((1.45345436126993)+((x471*x485))+(((0.20277200397865)*x468*x470))+(((-1.0)*x476*x484))+((x472*x479))+(((0.228616895520632)*sj1))+((x475*x480))+((r01*x474*x476))+(((0.119996251000297)*cj1))+(((0.106430805255421)*x470*x472))+(((-4.96993251131808)*x481))+(((-1.0)*r00*x474*x485))+(((-1.0)*x469*x482))+((r01*x480*x486))+((x474*x483))+(((-1.0)*r00*x469*x480))+(((-1.0)*r10*x469*x472))+(((-1.0)*x468*x487))+(((2.60861415218037)*x478))+((x468*x473))+((x477*x486))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-0.737531389040297)+((x484*x486))+(((-1.0)*r01*x474*x486))+((x472*x473))+(((-1.0)*x468*x479))+(((2.60861415218037)*x481))+(((-1.0)*x469*x471))+(((4.96993251131808)*x478))+((r00*x469*x474))+(((0.228616895520632)*cj1))+((r10*x468*x469))+((x480*x483))+(((-0.119996251000297)*sj1))+(((-1.0)*x482*x485))+(((-1.0)*x474*x475))+(((-1.0)*r00*x480*x485))+((x476*x477))+(((-0.106430805255421)*x468*x470))+(((0.20277200397865)*x470*x472))+((r01*x476*x480))+(((-1.0)*x472*x487))), ((1.45345436126993)+((x471*x485))+(((0.20277200397865)*x468*x470))+(((-1.0)*x476*x484))+((x472*x479))+(((0.228616895520632)*sj1))+((x475*x480))+((r01*x474*x476))+(((0.119996251000297)*cj1))+(((0.106430805255421)*x470*x472))+(((-4.96993251131808)*x481))+(((-1.0)*r00*x474*x485))+(((-1.0)*x469*x482))+((r01*x480*x486))+((x474*x483))+(((-1.0)*r00*x469*x480))+(((-1.0)*r10*x469*x472))+(((-1.0)*x468*x487))+(((2.60861415218037)*x478))+((x468*x473))+((x477*x486))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x488=IKcos(j2);
IkReal x489=IKsin(j2);
IkReal x490=((0.04079975)*cj5);
IkReal x491=((0.04079975)*sj5);
IkReal x492=(sj1*x489);
IkReal x493=(cj1*x488);
IkReal x494=(sj1*x488);
IkReal x495=(cj1*x489);
evalcond[0]=((((-0.29035)*cj1))+(((-0.08279975)*x495))+(((-0.08279975)*x494))+(((0.004)*sj1))+pz+((r21*x491))+(((-0.15775011)*x492))+(((0.15775011)*x493))+(((-1.0)*r20*x490)));
evalcond[1]=((0.046)+(((-1.0)*r10*sj0*x490))+(((-0.08279975)*x493))+((r11*sj0*x491))+(((0.08279975)*x492))+(((0.004)*cj1))+(((0.29035)*sj1))+((cj0*r01*x491))+((cj0*px))+((py*sj0))+(((-1.0)*cj0*r00*x490))+(((-0.15775011)*x494))+(((-0.15775011)*x495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x496=r21*r21;
IkReal x497=cj5*cj5;
IkReal x498=((((2.0)*cj5*r20*r21*sj5))+((x496*x497))+(((-1.0)*x497*(r20*r20)))+(((-1.0)*x496))+(((-1.0)*(r22*r22))));
j4eval[0]=x498;
j4eval[1]=IKsign(x498);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x499=((1.0)*sj0);
IkReal x500=((1.0)*cj0);
IkReal x501=((((-1.0)*cj5*r11*x499))+(((-1.0)*r10*sj5*x499))+(((-1.0)*r00*sj5*x500))+(((-1.0)*cj5*r01*x500)));
j4eval[0]=x501;
j4eval[1]=IKsign(x501);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x502=cj5*cj5;
IkReal x503=(r00*sj0);
IkReal x504=((1.0)*sj0);
IkReal x505=(r01*r21);
IkReal x506=(cj0*r10);
IkReal x507=(cj0*r11*r21);
IkReal x508=(cj5*r21*sj5);
IkReal x509=((1.0)*x502);
IkReal x510=(cj5*r20*sj5);
IkReal x511=((((-1.0)*x506*x508))+((sj0*x502*x505))+(((-1.0)*x507*x509))+(((-1.0)*cj0*r11*x510))+x507+((x503*x508))+((cj0*r12*r22))+(((-1.0)*r02*r22*x504))+((r20*x502*x506))+(((-1.0)*x504*x505))+((r01*sj0*x510))+(((-1.0)*r20*x503*x509)));
j4eval[0]=x511;
j4eval[1]=IKsign(x511);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x512=cj5*cj5;
IkReal x513=(cj1*sj2);
IkReal x514=(cj2*sj1);
IkReal x515=(cj5*r10);
IkReal x516=((1.0)*sj0);
IkReal x517=(r01*r21);
IkReal x518=(cj0*r12);
IkReal x519=(cj5*r20);
IkReal x520=(r02*sj0);
IkReal x521=((1.0)*cj0*sj5);
IkReal x522=(r20*x512);
IkReal x523=(cj0*r11*r21);
IkReal x524=(r01*sj0*sj5);
IkReal x525=(cj5*r00*x516);
CheckValue<IkReal> x526=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x515*x521))+(((-1.0)*r02*r22*x516))+((x519*x524))+(((-1.0)*r00*x516*x522))+(((-1.0)*x512*x523))+((sj0*x512*x517))+(((-1.0)*x516*x517))+x523+((cj0*r10*x522))+(((-1.0)*r11*x519*x521))+((r22*x518))+((cj5*r00*r21*sj0*sj5)))),-1);
if(!x526.valid){
continue;
}
CheckValue<IkReal> x527 = IKatan2WithCheck(IkReal((((x513*x520))+(((-1.0)*x513*x518))+(((-1.0)*x514*x518))+((x514*x520)))),IkReal(((((-1.0)*r11*x514*x521))+((cj0*x513*x515))+(((-1.0)*r11*x513*x521))+((cj0*x514*x515))+((x513*x524))+((x514*x524))+(((-1.0)*x513*x525))+(((-1.0)*x514*x525)))),IKFAST_ATAN2_MAGTHRESH);
if(!x527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x526.value)))+(x527.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x528=IKcos(j4);
IkReal x529=IKsin(j4);
IkReal x530=(cj2*sj1);
IkReal x531=(cj1*sj2);
IkReal x532=(sj1*sj2);
IkReal x533=(cj5*r00);
IkReal x534=(cj1*cj2);
IkReal x535=(r02*sj0);
IkReal x536=(cj5*r10);
IkReal x537=(r01*sj5);
IkReal x538=(cj5*r20);
IkReal x539=((1.0)*x528);
IkReal x540=(cj0*x529);
IkReal x541=(sj5*x528);
IkReal x542=((1.0)*x529);
IkReal x543=(sj0*x529);
IkReal x544=(x531+x530);
IkReal x545=(sj5*x543);
evalcond[0]=(((r21*x541))+(((-1.0)*x538*x539))+((r22*x529))+x544);
evalcond[1]=((((-1.0)*r22*x539))+(((-1.0)*x534))+(((-1.0)*x538*x542))+((r21*sj5*x529))+x532);
evalcond[2]=((((-1.0)*x536*x540))+((r11*sj5*x540))+(((-1.0)*sj0*x537*x542))+(((-1.0)*cj0*r12*x539))+((x533*x543))+((x528*x535)));
evalcond[3]=(((sj0*x528*x533))+((cj0*r11*x541))+(((-1.0)*sj0*x537*x539))+((r12*x540))+(((-1.0)*x535*x542))+(((-1.0)*cj0*x536*x539)));
evalcond[4]=((((-1.0)*cj0*x533*x539))+((cj0*x528*x537))+((r02*x540))+(((-1.0)*x532))+((r12*x543))+(((-1.0)*sj0*x536*x539))+x534+((r11*sj0*x541)));
evalcond[5]=(((r11*x545))+(((-1.0)*sj0*x536*x542))+(((-1.0)*x533*x540))+((x537*x540))+x544+(((-1.0)*r12*sj0*x539))+(((-1.0)*cj0*r02*x539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x546=(cj2*sj1);
IkReal x547=(r02*sj0);
IkReal x548=(cj5*sj0);
IkReal x549=((1.0)*cj0);
IkReal x550=(cj1*sj2);
IkReal x551=(cj5*r10);
IkReal x552=(cj0*r11*sj5);
IkReal x553=((1.0)*sj0*sj5);
CheckValue<IkReal> x554=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x553))+(((-1.0)*cj5*r01*x549))+(((-1.0)*r11*x548))+(((-1.0)*r00*sj5*x549)))),-1);
if(!x554.valid){
continue;
}
CheckValue<IkReal> x555 = IKatan2WithCheck(IkReal((((r00*x546*x548))+(((-1.0)*r01*x550*x553))+(((-1.0)*x549*x550*x551))+((r00*x548*x550))+(((-1.0)*r01*x546*x553))+(((-1.0)*x546*x549*x551))+((x550*x552))+((x546*x552)))),IkReal((((x547*x550))+(((-1.0)*r12*x549*x550))+(((-1.0)*r12*x546*x549))+((x546*x547)))),IKFAST_ATAN2_MAGTHRESH);
if(!x555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x554.value)))+(x555.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x556=IKcos(j4);
IkReal x557=IKsin(j4);
IkReal x558=(cj2*sj1);
IkReal x559=(cj1*sj2);
IkReal x560=(sj1*sj2);
IkReal x561=(cj5*r00);
IkReal x562=(cj1*cj2);
IkReal x563=(r02*sj0);
IkReal x564=(cj5*r10);
IkReal x565=(r01*sj5);
IkReal x566=(cj5*r20);
IkReal x567=((1.0)*x556);
IkReal x568=(cj0*x557);
IkReal x569=(sj5*x556);
IkReal x570=((1.0)*x557);
IkReal x571=(sj0*x557);
IkReal x572=(x559+x558);
IkReal x573=(sj5*x571);
evalcond[0]=((((-1.0)*x566*x567))+((r21*x569))+x572+((r22*x557)));
evalcond[1]=((((-1.0)*x566*x570))+((r21*sj5*x557))+x560+(((-1.0)*x562))+(((-1.0)*r22*x567)));
evalcond[2]=((((-1.0)*x564*x568))+((x561*x571))+((x556*x563))+(((-1.0)*cj0*r12*x567))+((r11*sj5*x568))+(((-1.0)*sj0*x565*x570)));
evalcond[3]=((((-1.0)*sj0*x565*x567))+(((-1.0)*cj0*x564*x567))+(((-1.0)*x563*x570))+((r12*x568))+((sj0*x556*x561))+((cj0*r11*x569)));
evalcond[4]=(((r12*x571))+(((-1.0)*cj0*x561*x567))+((cj0*x556*x565))+((r11*sj0*x569))+x562+(((-1.0)*x560))+(((-1.0)*sj0*x564*x567))+((r02*x568)));
evalcond[5]=(((x565*x568))+(((-1.0)*sj0*x564*x570))+(((-1.0)*cj0*r02*x567))+(((-1.0)*r12*sj0*x567))+x572+(((-1.0)*x561*x568))+((r11*x573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x574=r21*r21;
IkReal x575=cj5*cj5;
IkReal x576=(cj2*sj1);
IkReal x577=(cj1*sj2);
IkReal x578=(r21*sj5);
IkReal x579=(sj1*sj2);
IkReal x580=(cj1*cj2);
IkReal x581=(cj5*r20);
IkReal x582=((1.0)*x581);
CheckValue<IkReal> x583 = IKatan2WithCheck(IkReal((((x580*x581))+((x578*x579))+(((-1.0)*x579*x582))+(((-1.0)*x578*x580))+((r22*x577))+((r22*x576)))),IkReal((((x576*x578))+(((-1.0)*x577*x582))+(((-1.0)*r22*x579))+((x577*x578))+(((-1.0)*x576*x582))+((r22*x580)))),IKFAST_ATAN2_MAGTHRESH);
if(!x583.valid){
continue;
}
CheckValue<IkReal> x584=IKPowWithIntegerCheck(IKsign(((((-1.0)*x575*(r20*r20)))+((x574*x575))+(((-1.0)*x574))+(((-1.0)*(r22*r22)))+(((2.0)*x578*x581)))),-1);
if(!x584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x583.value)+(((1.5707963267949)*(x584.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x585=IKcos(j4);
IkReal x586=IKsin(j4);
IkReal x587=(cj2*sj1);
IkReal x588=(cj1*sj2);
IkReal x589=(sj1*sj2);
IkReal x590=(cj5*r00);
IkReal x591=(cj1*cj2);
IkReal x592=(r02*sj0);
IkReal x593=(cj5*r10);
IkReal x594=(r01*sj5);
IkReal x595=(cj5*r20);
IkReal x596=((1.0)*x585);
IkReal x597=(cj0*x586);
IkReal x598=(sj5*x585);
IkReal x599=((1.0)*x586);
IkReal x600=(sj0*x586);
IkReal x601=(x587+x588);
IkReal x602=(sj5*x600);
evalcond[0]=(((r21*x598))+(((-1.0)*x595*x596))+x601+((r22*x586)));
evalcond[1]=((((-1.0)*x591))+((r21*sj5*x586))+x589+(((-1.0)*x595*x599))+(((-1.0)*r22*x596)));
evalcond[2]=(((x585*x592))+(((-1.0)*x593*x597))+((x590*x600))+(((-1.0)*cj0*r12*x596))+((r11*sj5*x597))+(((-1.0)*sj0*x594*x599)));
evalcond[3]=(((sj0*x585*x590))+(((-1.0)*cj0*x593*x596))+(((-1.0)*x592*x599))+((r12*x597))+((cj0*r11*x598))+(((-1.0)*sj0*x594*x596)));
evalcond[4]=((((-1.0)*x589))+((r11*sj0*x598))+((cj0*x585*x594))+((r12*x600))+(((-1.0)*sj0*x593*x596))+((r02*x597))+x591+(((-1.0)*cj0*x590*x596)));
evalcond[5]=(((x594*x597))+(((-1.0)*r12*sj0*x596))+(((-1.0)*sj0*x593*x599))+((r11*x602))+(((-1.0)*cj0*r02*x596))+x601+(((-1.0)*x590*x597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x603=cj1*cj1;
IkReal x604=(sj1*sj3);
IkReal x605=(cj0*px);
IkReal x606=((0.042)*cj3);
IkReal x607=(r20*sj5);
IkReal x608=(cj1*sj3);
IkReal x609=(py*sj0);
IkReal x610=(cj5*r21);
IkReal x611=((0.15775011)*sj1);
IkReal x612=((0.04079975)*sj0);
IkReal x613=(cj5*r10);
IkReal x614=((0.29035)*sj3);
IkReal x615=(r11*sj5);
IkReal x616=((0.04079975)*sj1);
IkReal x617=(cj1*x610);
IkReal x618=((0.04079975)*cj0*r01*sj5);
IkReal x619=((0.04079975)*cj0*cj5*r00);
CheckValue<IkReal> x620=IKPowWithIntegerCheck(IKsign(((-1.1e-7)+(((1.1e-7)*(cj3*cj3)))+(((-0.04079975)*sj3))+((sj3*x606)))),-1);
if(!x620.valid){
continue;
}
CheckValue<IkReal> x621 = IKatan2WithCheck(IkReal(((((0.004)*cj1*x604))+(((0.04079975)*cj1*x607))+(((0.04079975)*x617))+(((1.1e-7)*x608*x610))+(((-1.0)*x604*x612*x613))+((x604*x609))+((x604*x605))+((x604*x612*x615))+(((1.1e-7)*x607*x608))+(((-1.0)*x604*x619))+(((-1.0)*cj1*x606*x607))+(((-1.0)*x606*x617))+((x607*x611))+(((0.046)*x604))+x614+((x610*x611))+(((-1.0)*x603*x614))+((x604*x618)))),IkReal(((((1.1e-7)*x604*x610))+(((-1.0)*sj1*x606*x607))+(((1.1e-7)*x604*x607))+((x608*x619))+(((-1.0)*sj1*x606*x610))+((x608*x612*x613))+(((-1.0)*x605*x608))+(((-0.004)*sj3*x603))+(((-0.15775011)*x617))+(((-1.0)*x608*x612*x615))+(((-0.046)*x608))+(((-1.0)*x608*x609))+(((-0.29035)*cj1*x604))+((x607*x616))+((x610*x616))+(((-0.15775011)*cj1*x607))+(((-1.0)*x608*x618)))),IKFAST_ATAN2_MAGTHRESH);
if(!x621.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x620.value)))+(x621.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x622=IKsin(j2);
IkReal x623=IKcos(j2);
IkReal x624=((0.042)*cj3);
IkReal x625=((1.0)*sj5);
IkReal x626=(r10*sj0);
IkReal x627=((0.04079975)*cj0);
IkReal x628=((0.04079975)*sj5);
IkReal x629=(r11*sj0);
IkReal x630=((0.04079975)*cj5);
IkReal x631=(cj1*sj3);
IkReal x632=((1.0)*cj5);
IkReal x633=((1.1e-7)*sj3);
IkReal x634=(sj1*x622);
IkReal x635=(sj1*x623);
IkReal x636=(cj1*x622);
IkReal x637=(cj1*x623);
evalcond[0]=((((-1.0)*x622*x631))+(((-1.0)*sj3*x635))+(((-1.0)*r21*x632))+(((-1.0)*r20*x625)));
evalcond[1]=((((-1.0)*x629*x632))+(((-1.0)*x623*x631))+((sj3*x634))+(((-1.0)*cj0*r01*x632))+(((-1.0)*cj0*r00*x625))+(((-1.0)*x625*x626)));
evalcond[2]=(((r21*x628))+(((-0.29035)*cj1))+(((-1.0)*x633*x635))+(((0.004)*sj1))+(((-1.1e-7)*x622*x631))+(((-0.15775011)*x634))+(((-1.0)*r20*x630))+pz+(((0.15775011)*x637))+((x624*x636))+((x624*x635))+(((-0.04079975)*x636))+(((-0.04079975)*x635)));
evalcond[3]=((0.046)+(((-1.0)*cj5*r00*x627))+((x628*x629))+(((-1.1e-7)*x623*x631))+(((0.04079975)*x634))+(((-1.0)*x624*x634))+(((-0.15775011)*x636))+(((-0.15775011)*x635))+(((0.004)*cj1))+((x624*x637))+(((0.29035)*sj1))+((r01*sj5*x627))+(((-1.0)*x626*x630))+((cj0*px))+((py*sj0))+((x633*x634))+(((-0.04079975)*x637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x638=((1.0)*sj0);
IkReal x639=((1.0)*cj0);
IkReal x640=((((-1.0)*cj5*r01*x639))+(((-1.0)*r10*sj5*x638))+(((-1.0)*cj5*r11*x638))+(((-1.0)*r00*sj5*x639)));
j4eval[0]=x640;
j4eval[1]=IKsign(x640);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x641=r21*r21;
IkReal x642=cj5*cj5;
IkReal x643=((((2.0)*cj5*r20*r21*sj5))+(((-1.0)*x641))+(((-1.0)*x642*(r20*r20)))+((x641*x642))+(((-1.0)*(r22*r22))));
j4eval[0]=x643;
j4eval[1]=IKsign(x643);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x644=cj5*cj5;
IkReal x645=(r00*sj0);
IkReal x646=((1.0)*sj0);
IkReal x647=(r01*r21);
IkReal x648=(cj0*r10);
IkReal x649=(cj0*r11*r21);
IkReal x650=(cj5*r21*sj5);
IkReal x651=((1.0)*x644);
IkReal x652=(cj5*r20*sj5);
IkReal x653=(((r01*sj0*x652))+(((-1.0)*r20*x645*x651))+((sj0*x644*x647))+((x645*x650))+(((-1.0)*x646*x647))+(((-1.0)*r02*r22*x646))+((r20*x644*x648))+x649+((cj0*r12*r22))+(((-1.0)*x649*x651))+(((-1.0)*x648*x650))+(((-1.0)*cj0*r11*x652)));
j4eval[0]=x653;
j4eval[1]=IKsign(x653);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x654=cj5*cj5;
IkReal x655=(cj0*r10);
IkReal x656=((1.0)*r21);
IkReal x657=(cj5*sj5);
IkReal x658=(cj0*r11);
IkReal x659=(r01*sj0);
IkReal x660=(cj0*r12);
IkReal x661=(r00*sj0);
IkReal x662=((1.0)*cj5);
IkReal x663=((1.0)*sj5);
IkReal x664=(r20*x654);
IkReal x665=((1.0)*r02*sj0);
IkReal x666=(cj2*cj3*sj1);
IkReal x667=(cj1*cj3*sj2);
CheckValue<IkReal> x668 = IKatan2WithCheck(IkReal(((((-1.0)*x665*x666))+(((-1.0)*x665*x667))+((x660*x666))+((x660*x667)))),IkReal(((((-1.0)*x659*x663*x667))+(((-1.0)*x659*x663*x666))+((sj5*x658*x666))+((sj5*x658*x667))+((cj5*x661*x666))+((cj5*x661*x667))+(((-1.0)*x655*x662*x666))+(((-1.0)*x655*x662*x667)))),IKFAST_ATAN2_MAGTHRESH);
if(!x668.valid){
continue;
}
CheckValue<IkReal> x669=IKPowWithIntegerCheck(IKsign((((r21*x654*x659))+(((-1.0)*r20*x657*x658))+(((-1.0)*r22*x665))+(((-1.0)*x654*x656*x658))+(((-1.0)*x655*x656*x657))+(((-1.0)*x656*x659))+(((-1.0)*x661*x664))+((r22*x660))+((r21*x658))+((x655*x664))+((r20*x657*x659))+((r21*x657*x661)))),-1);
if(!x669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x668.value)+(((1.5707963267949)*(x669.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x670=IKsin(j4);
IkReal x671=IKcos(j4);
IkReal x672=((1.0)*cj2);
IkReal x673=(cj3*sj1);
IkReal x674=(cj5*r00);
IkReal x675=(cj1*cj3);
IkReal x676=(cj5*r10);
IkReal x677=(r01*sj5);
IkReal x678=(cj5*r20);
IkReal x679=((1.0)*x671);
IkReal x680=(cj0*x670);
IkReal x681=(sj5*x671);
IkReal x682=(sj0*x671);
IkReal x683=(sj0*x670);
IkReal x684=(sj5*x683);
evalcond[0]=((((-1.0)*r22*x679))+((sj1*sj2))+(((-1.0)*cj1*x672))+(((-1.0)*x670*x678))+((r21*sj5*x670)));
evalcond[1]=((((-1.0)*sj2*x675))+((r21*x681))+(((-1.0)*x678*x679))+((r22*x670))+(((-1.0)*x672*x673)));
evalcond[2]=(((r11*sj5*x680))+((x674*x683))+(((-1.0)*x676*x680))+(((-1.0)*x677*x683))+(((-1.0)*cj0*r12*x679))+((r02*x682)));
evalcond[3]=((((-1.0)*sj3))+((cj0*r11*x681))+((x674*x682))+(((-1.0)*cj0*x676*x679))+(((-1.0)*sj0*x677*x679))+(((-1.0)*r02*x683))+((r12*x680)));
evalcond[4]=((((-1.0)*r12*sj0*x679))+((cj2*sj1))+((cj1*sj2))+((x677*x680))+(((-1.0)*x676*x683))+(((-1.0)*x674*x680))+((r11*x684))+(((-1.0)*cj0*r02*x679)));
evalcond[5]=((((-1.0)*cj0*x674*x679))+(((-1.0)*sj0*x676*x679))+((sj2*x673))+((cj0*x671*x677))+(((-1.0)*x672*x675))+((r02*x680))+((r12*x683))+((r11*sj0*x681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x685=r21*r21;
IkReal x686=cj5*cj5;
IkReal x687=((1.0)*cj1);
IkReal x688=(cj3*sj2);
IkReal x689=(r21*sj5);
IkReal x690=(sj1*sj2);
IkReal x691=((1.0)*r22);
IkReal x692=(cj3*sj1);
IkReal x693=(cj5*r20);
IkReal x694=(cj2*x693);
CheckValue<IkReal> x695=IKPowWithIntegerCheck(IKsign(((((-1.0)*x686*(r20*r20)))+(((2.0)*x689*x693))+((x685*x686))+(((-1.0)*r22*x691))+(((-1.0)*x685)))),-1);
if(!x695.valid){
continue;
}
CheckValue<IkReal> x696 = IKatan2WithCheck(IkReal((((cj1*x694))+((x689*x690))+(((-1.0)*x690*x693))+(((-1.0)*r22*x687*x688))+(((-1.0)*cj2*x691*x692))+(((-1.0)*cj2*x687*x689)))),IkReal(((((-1.0)*x687*x688*x689))+((x692*x694))+((cj1*cj2*r22))+(((-1.0)*cj2*x689*x692))+(((-1.0)*x690*x691))+((cj1*x688*x693)))),IKFAST_ATAN2_MAGTHRESH);
if(!x696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x695.value)))+(x696.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x697=IKsin(j4);
IkReal x698=IKcos(j4);
IkReal x699=((1.0)*cj2);
IkReal x700=(cj3*sj1);
IkReal x701=(cj5*r00);
IkReal x702=(cj1*cj3);
IkReal x703=(cj5*r10);
IkReal x704=(r01*sj5);
IkReal x705=(cj5*r20);
IkReal x706=((1.0)*x698);
IkReal x707=(cj0*x697);
IkReal x708=(sj5*x698);
IkReal x709=(sj0*x698);
IkReal x710=(sj0*x697);
IkReal x711=(sj5*x710);
evalcond[0]=((((-1.0)*x697*x705))+((r21*sj5*x697))+(((-1.0)*cj1*x699))+((sj1*sj2))+(((-1.0)*r22*x706)));
evalcond[1]=((((-1.0)*sj2*x702))+((r22*x697))+(((-1.0)*x699*x700))+(((-1.0)*x705*x706))+((r21*x708)));
evalcond[2]=((((-1.0)*x703*x707))+((r11*sj5*x707))+((x701*x710))+(((-1.0)*x704*x710))+((r02*x709))+(((-1.0)*cj0*r12*x706)));
evalcond[3]=((((-1.0)*sj0*x704*x706))+(((-1.0)*sj3))+(((-1.0)*cj0*x703*x706))+((x701*x709))+((cj0*r11*x708))+((r12*x707))+(((-1.0)*r02*x710)));
evalcond[4]=((((-1.0)*x703*x710))+((r11*x711))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*cj0*r02*x706))+((x704*x707))+(((-1.0)*r12*sj0*x706))+(((-1.0)*x701*x707)));
evalcond[5]=(((r11*sj0*x708))+((cj0*x698*x704))+((sj2*x700))+(((-1.0)*sj0*x703*x706))+(((-1.0)*cj0*x701*x706))+(((-1.0)*x699*x702))+((r12*x710))+((r02*x707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x712=(cj1*cj2);
IkReal x713=(cj0*sj5);
IkReal x714=(cj5*sj0);
IkReal x715=((1.0)*r11);
IkReal x716=(r02*sj0);
IkReal x717=(sj1*sj2);
IkReal x718=((1.0)*cj0);
IkReal x719=(cj5*r10);
IkReal x720=((1.0)*r00);
IkReal x721=((1.0)*sj0*sj5);
CheckValue<IkReal> x722 = IKatan2WithCheck(IkReal((((cj0*r12*x712))+(((-1.0)*r12*x717*x718))+(((-1.0)*x712*x716))+((x716*x717)))),IkReal((((r00*x712*x714))+(((-1.0)*x712*x718*x719))+(((-1.0)*x713*x715*x717))+((cj0*x717*x719))+(((-1.0)*x714*x717*x720))+((r11*x712*x713))+((r01*sj0*sj5*x717))+(((-1.0)*r01*x712*x721)))),IKFAST_ATAN2_MAGTHRESH);
if(!x722.valid){
continue;
}
CheckValue<IkReal> x723=IKPowWithIntegerCheck(IKsign(((((-1.0)*x714*x715))+(((-1.0)*x713*x720))+(((-1.0)*r10*x721))+(((-1.0)*cj5*r01*x718)))),-1);
if(!x723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x722.value)+(((1.5707963267949)*(x723.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x724=IKsin(j4);
IkReal x725=IKcos(j4);
IkReal x726=((1.0)*cj2);
IkReal x727=(cj3*sj1);
IkReal x728=(cj5*r00);
IkReal x729=(cj1*cj3);
IkReal x730=(cj5*r10);
IkReal x731=(r01*sj5);
IkReal x732=(cj5*r20);
IkReal x733=((1.0)*x725);
IkReal x734=(cj0*x724);
IkReal x735=(sj5*x725);
IkReal x736=(sj0*x725);
IkReal x737=(sj0*x724);
IkReal x738=(sj5*x737);
evalcond[0]=(((r21*sj5*x724))+(((-1.0)*x724*x732))+((sj1*sj2))+(((-1.0)*cj1*x726))+(((-1.0)*r22*x733)));
evalcond[1]=((((-1.0)*x732*x733))+(((-1.0)*sj2*x729))+(((-1.0)*x726*x727))+((r22*x724))+((r21*x735)));
evalcond[2]=(((r11*sj5*x734))+((x728*x737))+(((-1.0)*x730*x734))+(((-1.0)*x731*x737))+(((-1.0)*cj0*r12*x733))+((r02*x736)));
evalcond[3]=(((r12*x734))+(((-1.0)*sj3))+((x728*x736))+((cj0*r11*x735))+(((-1.0)*r02*x737))+(((-1.0)*cj0*x730*x733))+(((-1.0)*sj0*x731*x733)));
evalcond[4]=(((cj2*sj1))+((x731*x734))+(((-1.0)*x730*x737))+((cj1*sj2))+(((-1.0)*cj0*r02*x733))+(((-1.0)*x728*x734))+(((-1.0)*r12*sj0*x733))+((r11*x738)));
evalcond[5]=(((r12*x737))+((cj0*x725*x731))+((r11*sj0*x735))+((sj2*x727))+(((-1.0)*cj0*x728*x733))+((r02*x734))+(((-1.0)*x726*x729))+(((-1.0)*sj0*x730*x733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x739=cj5*cj5;
IkReal x740=cj0*cj0;
IkReal x741=r01*r01;
IkReal x742=r00*r00;
IkReal x743=r11*r11;
IkReal x744=r02*r02;
IkReal x745=(cj0*sj3);
IkReal x746=(cj5*sj5);
IkReal x747=((2.0)*r11);
IkReal x748=(r00*sj0);
IkReal x749=(r02*sj0);
IkReal x750=((1.0)*x739);
IkReal x751=(cj0*r01*sj0);
IkReal x752=((2.0)*r00*r01);
IkReal x753=((2.0)*cj0*r10*sj0);
IkReal x754=(x740*x743);
IkReal x755=(x740*x741);
CheckValue<IkReal> x756 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x745))+((sj3*x749)))),IkReal(((((-1.0)*cj5*sj3*x748))+(((-1.0)*r11*sj5*x745))+((cj5*r10*x745))+((r01*sj0*sj3*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x756.valid){
continue;
}
CheckValue<IkReal> x757=IKPowWithIntegerCheck(IKsign(((((-1.0)*x740*(r12*r12)))+(((-1.0)*x742*x750))+((x739*x754))+((x747*x751))+(((-1.0)*x750*x755))+(((-1.0)*cj0*x746*x747*x748))+((x739*x741))+((x739*x740*x742))+(((-1.0)*x740*x746*x752))+((x740*x744))+((x746*x752))+(((2.0)*cj0*r10*x739*x748))+(((-1.0)*x754))+(((-1.0)*x740*x750*(r10*r10)))+(((-1.0)*x741))+(((-1.0)*x744))+(((-2.0)*r10*x746*x751))+x755+(((-1.0)*x739*x747*x751))+(((2.0)*cj0*r12*x749))+((r10*x740*x746*x747)))),-1);
if(!x757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x756.value)+(((1.5707963267949)*(x757.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x758=IKsin(j4);
IkReal x759=IKcos(j4);
IkReal x760=(cj5*r10);
IkReal x761=(r11*sj5);
IkReal x762=(cj5*r00);
IkReal x763=(cj0*x758);
IkReal x764=(sj0*x758);
IkReal x765=(sj0*x759);
IkReal x766=((1.0)*r01*sj5);
IkReal x767=((1.0)*cj0*x759);
evalcond[0]=(((x761*x763))+(((-1.0)*x764*x766))+((x762*x764))+((r02*x765))+(((-1.0)*r12*x767))+(((-1.0)*x760*x763)));
evalcond[1]=((((-1.0)*sj3))+(((-1.0)*x765*x766))+((cj0*x759*x761))+((x762*x765))+((r12*x763))+(((-1.0)*r02*x764))+(((-1.0)*x760*x767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x768=(cj3*sj3);
j2eval[0]=x768;
j2eval[1]=IKsign(x768);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x769=(cj4*r22);
IkReal x770=((1.0)*cj1);
IkReal x771=(sj1*sj4);
IkReal x772=(cj5*r20);
IkReal x773=(r21*sj5);
IkReal x774=(cj4*sj1);
IkReal x775=(cj1*x773);
if( IKabs(((((-1.0)*x771*x773))+((x771*x772))+((sj1*x769))+((cj4*x775))+((cj1*r22*sj4))+(((-1.0)*cj4*x770*x772)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x775))+((r22*x771))+(((-1.0)*x772*x774))+((x773*x774))+(((-1.0)*x769*x770))+(((-1.0)*sj4*x770*x772)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x771*x773))+((x771*x772))+((sj1*x769))+((cj4*x775))+((cj1*r22*sj4))+(((-1.0)*cj4*x770*x772))))+IKsqr((((sj4*x775))+((r22*x771))+(((-1.0)*x772*x774))+((x773*x774))+(((-1.0)*x769*x770))+(((-1.0)*sj4*x770*x772))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x771*x773))+((x771*x772))+((sj1*x769))+((cj4*x775))+((cj1*r22*sj4))+(((-1.0)*cj4*x770*x772))), (((sj4*x775))+((r22*x771))+(((-1.0)*x772*x774))+((x773*x774))+(((-1.0)*x769*x770))+(((-1.0)*sj4*x770*x772))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x776=IKcos(j2);
IkReal x777=IKsin(j2);
IkReal x778=((0.00120025)*cj1);
IkReal x779=(cj0*r02);
IkReal x780=(sj0*sj4);
IkReal x781=((1.0)*cj5);
IkReal x782=((0.04079975)*cj0);
IkReal x783=(r11*sj5);
IkReal x784=(r01*sj5);
IkReal x785=(cj0*cj4);
IkReal x786=((1.0)*cj4);
IkReal x787=((0.04079975)*sj0);
IkReal x788=(r21*sj5);
IkReal x789=(cj0*sj4);
IkReal x790=(cj4*sj0);
IkReal x791=(sj1*x777);
IkReal x792=(cj1*x776);
IkReal x793=(cj1*x777);
IkReal x794=(sj1*x776);
IkReal x795=((1.0)*x792);
evalcond[0]=((((-1.0)*x795))+((sj4*x788))+(((-1.0)*r22*x786))+x791+(((-1.0)*r20*sj4*x781)));
evalcond[1]=(((r22*sj4))+(((-1.0)*cj4*r20*x781))+((cj4*x788))+(((-1.0)*x794))+(((-1.0)*x793)));
evalcond[2]=((((0.15775011)*x792))+((x777*x778))+(((-0.29035)*cj1))+(((0.00120025)*x794))+(((-0.04079975)*cj5*r20))+(((0.04079975)*x788))+(((0.004)*sj1))+(((-0.15775011)*x791))+pz);
evalcond[3]=(((sj4*x779))+(((-1.0)*x795))+((x783*x790))+(((-1.0)*r00*x781*x785))+((x784*x785))+x791+((r12*x780))+(((-1.0)*r10*x781*x790)));
evalcond[4]=((((-1.0)*r12*sj0*x786))+(((-1.0)*r00*x781*x789))+((x784*x789))+(((-1.0)*r10*x780*x781))+((x780*x783))+x793+x794+(((-1.0)*x779*x786)));
evalcond[5]=((0.046)+((x776*x778))+(((-1.0)*cj5*r10*x787))+((x782*x784))+((x783*x787))+(((-0.00120025)*x791))+(((-0.15775011)*x793))+(((-0.15775011)*x794))+(((0.004)*cj1))+(((0.29035)*sj1))+(((-1.0)*cj5*r00*x782))+((cj0*px))+((py*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x796=((1.0)*cj1);
IkReal x797=(cj4*r22);
IkReal x798=(cj5*r21);
IkReal x799=((1.0)*sj1);
IkReal x800=(r20*sj5);
IkReal x801=(r21*sj4*sj5);
IkReal x802=(cj5*r20*sj4);
if( IKabs(((((-1.0)*x796*x800))+(((-1.0)*x796*x798))+(((-1.0)*x799*x801))+((sj1*x797))+((sj1*x802)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x798*x799))+(((-1.0)*x796*x802))+(((-1.0)*x796*x797))+(((-1.0)*x799*x800))+((cj1*x801)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x796*x800))+(((-1.0)*x796*x798))+(((-1.0)*x799*x801))+((sj1*x797))+((sj1*x802))))+IKsqr(((((-1.0)*x798*x799))+(((-1.0)*x796*x802))+(((-1.0)*x796*x797))+(((-1.0)*x799*x800))+((cj1*x801))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x796*x800))+(((-1.0)*x796*x798))+(((-1.0)*x799*x801))+((sj1*x797))+((sj1*x802))), ((((-1.0)*x798*x799))+(((-1.0)*x796*x802))+(((-1.0)*x796*x797))+(((-1.0)*x799*x800))+((cj1*x801))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x803=IKsin(j2);
IkReal x804=IKcos(j2);
IkReal x805=((1.0)*sj5);
IkReal x806=(r10*sj0);
IkReal x807=((1.0)*sj4);
IkReal x808=((0.04079975)*sj5);
IkReal x809=(cj0*r01);
IkReal x810=((1.0)*cj4);
IkReal x811=(r11*sj0);
IkReal x812=((1.0)*cj5);
IkReal x813=(sj4*sj5);
IkReal x814=(sj1*x803);
IkReal x815=(cj0*cj5*r00);
IkReal x816=((1.0)*x804);
IkReal x817=(cj1*x803);
IkReal x818=(sj1*x804);
IkReal x819=(cj1*x804);
IkReal x820=(cj1*x816);
evalcond[0]=((((-1.0)*x817))+(((-1.0)*r20*x805))+(((-1.0)*sj1*x816))+(((-1.0)*r21*x812)));
evalcond[1]=((((-1.0)*x820))+(((-1.0)*r22*x810))+x814+((r21*x813))+(((-1.0)*cj5*r20*x807)));
evalcond[2]=((((-1.0)*x805*x806))+(((-1.0)*x820))+(((-1.0)*x809*x812))+(((-1.0)*x811*x812))+(((-1.0)*cj0*r00*x805))+x814);
CheckValue<IkReal> x821=IKPowWithIntegerCheck(cj4,-1);
if(!x821.valid){
continue;
}
evalcond[3]=((((-0.29035)*cj1))+(((-0.04079986)*x818))+(((-0.04079986)*x817))+(((-0.04079975)*r22*sj4*(x821.value)))+(((0.004)*sj1))+pz+(((-0.15775011)*x814))+(((0.15775011)*x819)));
evalcond[4]=((((-1.0)*cj5*x806*x807))+((x809*x813))+((x811*x813))+(((-1.0)*cj0*r02*x810))+(((-1.0)*x807*x815))+x818+x817+(((-1.0)*r12*sj0*x810)));
evalcond[5]=((0.046)+(((-0.04079975)*cj5*x806))+(((-0.04079986)*x819))+(((-0.04079975)*x815))+((x808*x811))+(((0.04079986)*x814))+(((0.004)*cj1))+(((0.29035)*sj1))+((x808*x809))+((cj0*px))+((py*sj0))+(((-0.15775011)*x818))+(((-0.15775011)*x817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x822=((1.0)*cj4);
IkReal x823=(r22*sj1);
IkReal x824=((1.0)*sj4);
IkReal x825=(cj1*r22);
IkReal x826=(cj1*r21*sj5);
IkReal x827=(cj5*r20*sj1);
IkReal x828=(r21*sj1*sj5);
IkReal x829=(cj1*cj5*r20);
if( IKabs(((((-1.0)*x822*x826))+(((-1.0)*x824*x828))+(((-1.0)*x824*x825))+((cj4*x823))+((cj4*x829))+((sj4*x827)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x822*x828))+(((-1.0)*x822*x825))+(((-1.0)*x823*x824))+(((-1.0)*x824*x829))+((cj4*x827))+((sj4*x826)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x822*x826))+(((-1.0)*x824*x828))+(((-1.0)*x824*x825))+((cj4*x823))+((cj4*x829))+((sj4*x827))))+IKsqr(((((-1.0)*x822*x828))+(((-1.0)*x822*x825))+(((-1.0)*x823*x824))+(((-1.0)*x824*x829))+((cj4*x827))+((sj4*x826))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x822*x826))+(((-1.0)*x824*x828))+(((-1.0)*x824*x825))+((cj4*x823))+((cj4*x829))+((sj4*x827))), ((((-1.0)*x822*x828))+(((-1.0)*x822*x825))+(((-1.0)*x823*x824))+(((-1.0)*x824*x829))+((cj4*x827))+((sj4*x826))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x830=IKsin(j2);
IkReal x831=IKcos(j2);
IkReal x832=(cj0*sj4);
IkReal x833=((1.0)*cj5);
IkReal x834=(sj0*sj4);
IkReal x835=((0.04079975)*cj0);
IkReal x836=(r01*sj5);
IkReal x837=(cj0*cj4);
IkReal x838=((0.04079975)*sj0);
IkReal x839=(r11*sj5);
IkReal x840=((1.0)*cj4);
IkReal x841=(r21*sj5);
IkReal x842=(cj4*sj0);
IkReal x843=(sj1*x831);
IkReal x844=(cj1*x830);
IkReal x845=(cj1*x831);
IkReal x846=(sj1*x830);
IkReal x847=(x843+x844);
evalcond[0]=(((r22*sj4))+(((-1.0)*cj4*r20*x833))+((cj4*x841))+x847);
evalcond[1]=((((-1.0)*r20*sj4*x833))+((sj4*x841))+(((-1.0)*r22*x840))+(((-1.0)*x845))+x846);
evalcond[2]=((((-0.15775011)*x846))+(((-0.29035)*cj1))+(((-0.08279975)*x843))+(((-0.08279975)*x844))+(((-0.04079975)*cj5*r20))+(((0.004)*sj1))+pz+(((0.15775011)*x845))+(((0.04079975)*x841)));
evalcond[3]=(((x839*x842))+((r02*x832))+(((-1.0)*r10*x833*x842))+((x836*x837))+(((-1.0)*r00*x833*x837))+((r12*x834))+(((-1.0)*x846))+x845);
evalcond[4]=(((x832*x836))+(((-1.0)*r02*x837))+(((-1.0)*r10*x833*x834))+(((-1.0)*r00*x832*x833))+((x834*x839))+(((-1.0)*r12*sj0*x840))+x847);
evalcond[5]=((0.046)+(((-0.15775011)*x843))+(((-0.15775011)*x844))+(((0.08279975)*x846))+((x838*x839))+(((-0.08279975)*x845))+(((-1.0)*cj5*r10*x838))+((x835*x836))+(((0.004)*cj1))+(((-1.0)*cj5*r00*x835))+(((0.29035)*sj1))+((cj0*px))+((py*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x848=(cj4*r22);
IkReal x849=((1.0)*cj1);
IkReal x850=(r20*sj1);
IkReal x851=(cj5*sj4);
IkReal x852=(cj5*r21);
IkReal x853=(r21*sj4*sj5);
if( IKabs((((x850*x851))+((cj1*r20*sj5))+(((-1.0)*sj1*x853))+((cj1*x852))+((sj1*x848)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj5*x850))+((sj1*x852))+((cj1*x853))+(((-1.0)*r20*x849*x851))+(((-1.0)*x848*x849)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x850*x851))+((cj1*r20*sj5))+(((-1.0)*sj1*x853))+((cj1*x852))+((sj1*x848))))+IKsqr((((sj5*x850))+((sj1*x852))+((cj1*x853))+(((-1.0)*r20*x849*x851))+(((-1.0)*x848*x849))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x850*x851))+((cj1*r20*sj5))+(((-1.0)*sj1*x853))+((cj1*x852))+((sj1*x848))), (((sj5*x850))+((sj1*x852))+((cj1*x853))+(((-1.0)*r20*x849*x851))+(((-1.0)*x848*x849))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x854=IKsin(j2);
IkReal x855=IKcos(j2);
IkReal x856=((1.0)*sj5);
IkReal x857=(r10*sj0);
IkReal x858=((1.0)*sj4);
IkReal x859=((0.04079975)*sj5);
IkReal x860=(cj0*r01);
IkReal x861=((1.0)*cj4);
IkReal x862=(r11*sj0);
IkReal x863=((1.0)*cj5);
IkReal x864=(sj4*sj5);
IkReal x865=(sj1*x855);
IkReal x866=(cj1*x854);
IkReal x867=(cj1*x855);
IkReal x868=(cj0*cj5*r00);
IkReal x869=(sj1*x854);
IkReal x870=(x866+x865);
evalcond[0]=((((-1.0)*r20*x856))+x870+(((-1.0)*r21*x863)));
evalcond[1]=((((-1.0)*cj5*r20*x858))+((r21*x864))+(((-1.0)*x867))+x869+(((-1.0)*r22*x861)));
evalcond[2]=((((-1.0)*x869))+(((-1.0)*x862*x863))+(((-1.0)*x860*x863))+(((-1.0)*cj0*r00*x856))+(((-1.0)*x856*x857))+x867);
CheckValue<IkReal> x871=IKPowWithIntegerCheck(cj4,-1);
if(!x871.valid){
continue;
}
evalcond[3]=((((-0.29035)*cj1))+(((0.15775011)*x867))+(((-0.04079975)*r22*sj4*(x871.value)))+(((0.004)*sj1))+pz+(((-0.04079964)*x866))+(((-0.04079964)*x865))+(((-0.15775011)*x869)));
evalcond[4]=((((-1.0)*cj5*x857*x858))+((x862*x864))+(((-1.0)*x858*x868))+((x860*x864))+x870+(((-1.0)*r12*sj0*x861))+(((-1.0)*cj0*r02*x861)));
evalcond[5]=((0.046)+(((0.04079964)*x869))+(((-0.04079975)*x868))+((x859*x862))+((x859*x860))+(((0.004)*cj1))+(((0.29035)*sj1))+(((-0.04079964)*x867))+(((-0.15775011)*x866))+(((-0.15775011)*x865))+((cj0*px))+((py*sj0))+(((-0.04079975)*cj5*x857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x872=(r21*sj5);
IkReal x873=(cj3*sj1);
IkReal x874=((1.0)*cj1*cj3);
IkReal x875=(cj5*r11*sj0);
IkReal x876=(cj0*r00*sj5);
IkReal x877=(cj4*sj1*sj3);
IkReal x878=(cj0*cj5*r01);
IkReal x879=((1.0)*cj5*r20);
IkReal x880=(cj1*cj4*sj3);
IkReal x881=(r10*sj0*sj5);
IkReal x882=(r22*sj3*sj4);
CheckValue<IkReal> x883 = IKatan2WithCheck(IkReal(((((-1.0)*x879*x880))+((x873*x878))+((x873*x876))+((x873*x875))+((cj1*x882))+((x872*x880))+((x873*x881)))),IkReal(((((-1.0)*x877*x879))+((sj1*x882))+((x872*x877))+(((-1.0)*x874*x878))+(((-1.0)*x874*x876))+(((-1.0)*x874*x875))+(((-1.0)*x874*x881)))),IKFAST_ATAN2_MAGTHRESH);
if(!x883.valid){
continue;
}
CheckValue<IkReal> x884=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x884.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x883.value)+(((1.5707963267949)*(x884.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x885=IKsin(j2);
IkReal x886=IKcos(j2);
IkReal x887=((1.1e-7)*sj3);
IkReal x888=((1.0)*sj5);
IkReal x889=(r10*sj0);
IkReal x890=((1.0)*sj4);
IkReal x891=((1.0)*cj1);
IkReal x892=((0.04079975)*sj5);
IkReal x893=(cj0*r01);
IkReal x894=((1.0)*cj4);
IkReal x895=(cj0*r02);
IkReal x896=(r11*sj0);
IkReal x897=(r12*sj0);
IkReal x898=((0.042)*cj3);
IkReal x899=((0.04079975)*cj5);
IkReal x900=(cj5*r20);
IkReal x901=((1.0)*cj5);
IkReal x902=(cj4*sj5);
IkReal x903=(sj4*sj5);
IkReal x904=(sj1*x886);
IkReal x905=(cj0*cj5*r00);
IkReal x906=(sj3*x885);
IkReal x907=(cj1*x885);
IkReal x908=(cj1*x886);
IkReal x909=(cj3*x885);
IkReal x910=(sj1*x885);
evalcond[0]=((((-1.0)*x891*x906))+(((-1.0)*r21*x901))+(((-1.0)*sj3*x904))+(((-1.0)*r20*x888)));
evalcond[1]=(((r21*x903))+(((-1.0)*x890*x900))+(((-1.0)*r22*x894))+x910+(((-1.0)*x886*x891)));
evalcond[2]=(((r21*x902))+(((-1.0)*x891*x909))+(((-1.0)*cj3*x904))+((r22*sj4))+(((-1.0)*x894*x900)));
evalcond[3]=((((-1.0)*cj0*r00*x888))+(((-1.0)*x896*x901))+(((-1.0)*x893*x901))+(((-1.0)*sj3*x886*x891))+(((-1.0)*x888*x889))+((sj1*x906)));
evalcond[4]=((((-1.0)*x890*x905))+((x893*x903))+(((-1.0)*x894*x895))+(((-1.0)*x894*x897))+((x896*x903))+(((-1.0)*cj5*x889*x890))+x904+x907);
evalcond[5]=(((sj4*x895))+((sj4*x897))+(((-1.0)*cj3*x886*x891))+(((-1.0)*x894*x905))+((x893*x902))+((x896*x902))+(((-1.0)*cj5*x889*x894))+((sj1*x909)));
evalcond[6]=((((-0.29035)*cj1))+(((-0.15775011)*x910))+(((-0.04079975)*x904))+(((-0.04079975)*x907))+(((-1.0)*x887*x904))+(((-1.0)*x887*x907))+(((0.004)*sj1))+pz+((r21*x892))+(((0.15775011)*x908))+((x898*x904))+((x898*x907))+(((-1.0)*r20*x899)));
evalcond[7]=((0.046)+(((-1.0)*cj0*r00*x899))+(((0.04079975)*x910))+((x887*x910))+(((-0.04079975)*x908))+(((-1.0)*x898*x910))+(((-1.0)*x887*x908))+(((-0.15775011)*x907))+(((-0.15775011)*x904))+(((-1.0)*x889*x899))+((x892*x893))+((x892*x896))+(((0.004)*cj1))+(((0.29035)*sj1))+((x898*x908))+((cj0*px))+((py*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x911=(cj1*cj4);
IkReal x912=(r21*sj5);
IkReal x913=((1.0)*cj3);
IkReal x914=(cj5*r20);
IkReal x915=(cj1*sj4);
IkReal x916=(sj1*sj4);
IkReal x917=(cj4*sj1);
CheckValue<IkReal> x918=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x918.valid){
continue;
}
CheckValue<IkReal> x919 = IKatan2WithCheck(IkReal(((((-1.0)*x912*x913*x916))+((x911*x912))+((cj3*r22*x917))+((r22*x915))+(((-1.0)*x911*x914))+((cj3*x914*x916)))),IkReal((((cj3*x912*x915))+((r22*x916))+((x912*x917))+(((-1.0)*r22*x911*x913))+(((-1.0)*x913*x914*x915))+(((-1.0)*x914*x917)))),IKFAST_ATAN2_MAGTHRESH);
if(!x919.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x918.value)))+(x919.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x920=IKsin(j2);
IkReal x921=IKcos(j2);
IkReal x922=((1.1e-7)*sj3);
IkReal x923=((1.0)*sj5);
IkReal x924=(r10*sj0);
IkReal x925=((1.0)*sj4);
IkReal x926=((1.0)*cj1);
IkReal x927=((0.04079975)*sj5);
IkReal x928=(cj0*r01);
IkReal x929=((1.0)*cj4);
IkReal x930=(cj0*r02);
IkReal x931=(r11*sj0);
IkReal x932=(r12*sj0);
IkReal x933=((0.042)*cj3);
IkReal x934=((0.04079975)*cj5);
IkReal x935=(cj5*r20);
IkReal x936=((1.0)*cj5);
IkReal x937=(cj4*sj5);
IkReal x938=(sj4*sj5);
IkReal x939=(sj1*x921);
IkReal x940=(cj0*cj5*r00);
IkReal x941=(sj3*x920);
IkReal x942=(cj1*x920);
IkReal x943=(cj1*x921);
IkReal x944=(cj3*x920);
IkReal x945=(sj1*x920);
evalcond[0]=((((-1.0)*x926*x941))+(((-1.0)*r21*x936))+(((-1.0)*r20*x923))+(((-1.0)*sj3*x939)));
evalcond[1]=((((-1.0)*x925*x935))+((r21*x938))+(((-1.0)*r22*x929))+(((-1.0)*x921*x926))+x945);
evalcond[2]=((((-1.0)*x926*x944))+((r21*x937))+((r22*sj4))+(((-1.0)*cj3*x939))+(((-1.0)*x929*x935)));
evalcond[3]=((((-1.0)*x931*x936))+(((-1.0)*x928*x936))+((sj1*x941))+(((-1.0)*sj3*x921*x926))+(((-1.0)*x923*x924))+(((-1.0)*cj0*r00*x923)));
evalcond[4]=(((x928*x938))+((x931*x938))+(((-1.0)*x929*x932))+(((-1.0)*x929*x930))+(((-1.0)*x925*x940))+x939+x942+(((-1.0)*cj5*x924*x925)));
evalcond[5]=((((-1.0)*x929*x940))+(((-1.0)*cj3*x921*x926))+((x928*x937))+((sj1*x944))+((sj4*x932))+((sj4*x930))+((x931*x937))+(((-1.0)*cj5*x924*x929)));
evalcond[6]=(((x933*x942))+(((-0.29035)*cj1))+(((-1.0)*r20*x934))+((r21*x927))+(((0.004)*sj1))+pz+(((-0.04079975)*x942))+(((-1.0)*x922*x942))+(((-0.15775011)*x945))+((x933*x939))+(((0.15775011)*x943))+(((-0.04079975)*x939))+(((-1.0)*x922*x939)));
evalcond[7]=((0.046)+(((-0.15775011)*x939))+((x933*x943))+((x927*x931))+((x927*x928))+(((-1.0)*x924*x934))+(((-1.0)*x933*x945))+(((0.04079975)*x945))+(((0.004)*cj1))+(((0.29035)*sj1))+((x922*x945))+(((-0.04079975)*x943))+(((-1.0)*x922*x943))+((cj0*px))+((py*sj0))+(((-0.15775011)*x942))+(((-1.0)*cj0*r00*x934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x946=(sj3*sj4);
IkReal x947=((1.0)*sj1);
IkReal x948=(r20*sj5);
IkReal x949=(r21*sj5);
IkReal x950=((1.0)*cj1);
IkReal x951=(cj5*x950);
IkReal x952=(cj4*r22*sj3);
CheckValue<IkReal> x953=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x953.valid){
continue;
}
CheckValue<IkReal> x954 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x951))+(((-1.0)*x946*x947*x949))+((sj1*x952))+((cj5*r20*sj1*x946))+(((-1.0)*x948*x950)))),IkReal((((cj1*x946*x949))+(((-1.0)*x947*x948))+(((-1.0)*r20*x946*x951))+(((-1.0)*cj5*r21*x947))+(((-1.0)*x950*x952)))),IKFAST_ATAN2_MAGTHRESH);
if(!x954.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x953.value)))+(x954.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x955=IKsin(j2);
IkReal x956=IKcos(j2);
IkReal x957=((1.1e-7)*sj3);
IkReal x958=((1.0)*sj5);
IkReal x959=(r10*sj0);
IkReal x960=((1.0)*sj4);
IkReal x961=((1.0)*cj1);
IkReal x962=((0.04079975)*sj5);
IkReal x963=(cj0*r01);
IkReal x964=((1.0)*cj4);
IkReal x965=(cj0*r02);
IkReal x966=(r11*sj0);
IkReal x967=(r12*sj0);
IkReal x968=((0.042)*cj3);
IkReal x969=((0.04079975)*cj5);
IkReal x970=(cj5*r20);
IkReal x971=((1.0)*cj5);
IkReal x972=(cj4*sj5);
IkReal x973=(sj4*sj5);
IkReal x974=(sj1*x956);
IkReal x975=(cj0*cj5*r00);
IkReal x976=(sj3*x955);
IkReal x977=(cj1*x955);
IkReal x978=(cj1*x956);
IkReal x979=(cj3*x955);
IkReal x980=(sj1*x955);
evalcond[0]=((((-1.0)*r20*x958))+(((-1.0)*sj3*x974))+(((-1.0)*x961*x976))+(((-1.0)*r21*x971)));
evalcond[1]=(((r21*x973))+(((-1.0)*x956*x961))+(((-1.0)*r22*x964))+x980+(((-1.0)*x960*x970)));
evalcond[2]=((((-1.0)*cj3*x974))+((r22*sj4))+((r21*x972))+(((-1.0)*x964*x970))+(((-1.0)*x961*x979)));
evalcond[3]=((((-1.0)*x963*x971))+(((-1.0)*sj3*x956*x961))+(((-1.0)*x966*x971))+((sj1*x976))+(((-1.0)*x958*x959))+(((-1.0)*cj0*r00*x958)));
evalcond[4]=((((-1.0)*cj5*x959*x960))+((x963*x973))+(((-1.0)*x964*x967))+(((-1.0)*x964*x965))+((x966*x973))+x974+x977+(((-1.0)*x960*x975)));
evalcond[5]=((((-1.0)*cj3*x956*x961))+(((-1.0)*cj5*x959*x964))+((sj4*x965))+((sj4*x967))+((x963*x972))+(((-1.0)*x964*x975))+((sj1*x979))+((x966*x972)));
evalcond[6]=((((-0.29035)*cj1))+(((0.15775011)*x978))+(((-1.0)*r20*x969))+(((-1.0)*x957*x977))+(((-1.0)*x957*x974))+((x968*x974))+((x968*x977))+(((0.004)*sj1))+((r21*x962))+(((-0.04079975)*x977))+(((-0.04079975)*x974))+pz+(((-0.15775011)*x980)));
evalcond[7]=((0.046)+((x962*x963))+((x962*x966))+(((-1.0)*x957*x978))+((x968*x978))+(((0.04079975)*x980))+(((-1.0)*x959*x969))+(((-0.04079975)*x978))+(((0.004)*cj1))+(((0.29035)*sj1))+((x957*x980))+(((-0.15775011)*x977))+(((-0.15775011)*x974))+(((-1.0)*cj0*r00*x969))+((cj0*px))+((py*sj0))+(((-1.0)*x968*x980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x981=(cj0*r01);
IkReal x982=(cj5*sj1);
IkReal x983=(r11*sj0);
IkReal x984=((1.0)*sj5);
IkReal x985=(r10*sj0);
IkReal x986=(sj1*sj5);
IkReal x987=(cj0*r00);
IkReal x988=((1.0)*cj1*cj5);
CheckValue<IkReal> x989=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x989.valid){
continue;
}
CheckValue<IkReal> x990 = IKatan2WithCheck(IkReal((((x981*x982))+(((-1.0)*cj1*r20*x984))+(((-1.0)*r21*x988))+((x986*x987))+((x982*x983))+((x985*x986)))),IkReal(((((-1.0)*cj1*x984*x985))+(((-1.0)*cj1*x984*x987))+(((-1.0)*r20*sj1*x984))+(((-1.0)*r21*x982))+(((-1.0)*x981*x988))+(((-1.0)*x983*x988)))),IKFAST_ATAN2_MAGTHRESH);
if(!x990.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x989.value)))+(x990.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x991=IKsin(j2);
IkReal x992=IKcos(j2);
IkReal x993=((0.042)*cj3);
IkReal x994=((1.0)*sj5);
IkReal x995=(r10*sj0);
IkReal x996=((0.04079975)*cj0);
IkReal x997=((0.04079975)*sj5);
IkReal x998=(r11*sj0);
IkReal x999=((0.04079975)*cj5);
IkReal x1000=(cj1*sj3);
IkReal x1001=((1.0)*cj5);
IkReal x1002=((1.1e-7)*sj3);
IkReal x1003=(sj1*x991);
IkReal x1004=(sj1*x992);
IkReal x1005=(cj1*x991);
IkReal x1006=(cj1*x992);
evalcond[0]=((((-1.0)*sj3*x1004))+(((-1.0)*r21*x1001))+(((-1.0)*x1000*x991))+(((-1.0)*r20*x994)));
evalcond[1]=((((-1.0)*cj0*r01*x1001))+(((-1.0)*cj0*r00*x994))+(((-1.0)*x994*x995))+((sj3*x1003))+(((-1.0)*x1001*x998))+(((-1.0)*x1000*x992)));
evalcond[2]=((((0.15775011)*x1006))+(((-0.29035)*cj1))+(((-0.04079975)*x1004))+(((-0.04079975)*x1005))+(((-1.1e-7)*x1000*x991))+(((0.004)*sj1))+pz+(((-1.0)*x1002*x1004))+((r21*x997))+((x1004*x993))+((x1005*x993))+(((-1.0)*r20*x999))+(((-0.15775011)*x1003)));
evalcond[3]=((0.046)+(((-1.0)*x1003*x993))+(((-1.0)*x995*x999))+(((-0.04079975)*x1006))+((x997*x998))+(((-1.1e-7)*x1000*x992))+(((0.04079975)*x1003))+((r01*sj5*x996))+(((0.004)*cj1))+(((0.29035)*sj1))+((x1002*x1003))+((cj0*px))+((py*sj0))+(((-1.0)*cj5*r00*x996))+((x1006*x993))+(((-0.15775011)*x1005))+(((-0.15775011)*x1004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x1007=((1.0)*sj0);
IkReal x1008=((1.0)*cj0);
IkReal x1009=((((-1.0)*cj5*r11*x1007))+(((-1.0)*r00*sj5*x1008))+(((-1.0)*r10*sj5*x1007))+(((-1.0)*cj5*r01*x1008)));
j4eval[0]=x1009;
j4eval[1]=IKsign(x1009);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1010=r21*r21;
IkReal x1011=cj5*cj5;
IkReal x1012=((((2.0)*cj5*r20*r21*sj5))+(((-1.0)*(r22*r22)))+(((-1.0)*x1011*(r20*r20)))+((x1010*x1011))+(((-1.0)*x1010)));
j4eval[0]=x1012;
j4eval[1]=IKsign(x1012);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1013=cj5*cj5;
IkReal x1014=(r00*sj0);
IkReal x1015=((1.0)*sj0);
IkReal x1016=(r01*r21);
IkReal x1017=(cj0*r10);
IkReal x1018=(cj0*r11*r21);
IkReal x1019=(cj5*r21*sj5);
IkReal x1020=((1.0)*x1013);
IkReal x1021=(cj5*r20*sj5);
IkReal x1022=(((x1014*x1019))+x1018+(((-1.0)*r20*x1014*x1020))+(((-1.0)*x1018*x1020))+((sj0*x1013*x1016))+(((-1.0)*r02*r22*x1015))+(((-1.0)*x1015*x1016))+(((-1.0)*x1017*x1019))+(((-1.0)*cj0*r11*x1021))+((r01*sj0*x1021))+((r20*x1013*x1017))+((cj0*r12*r22)));
j4eval[0]=x1022;
j4eval[1]=IKsign(x1022);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1023=cj5*cj5;
IkReal x1024=(cj0*r10);
IkReal x1025=((1.0)*r21);
IkReal x1026=(cj5*sj5);
IkReal x1027=(cj0*r11);
IkReal x1028=(r01*sj0);
IkReal x1029=(cj0*r12);
IkReal x1030=(r00*sj0);
IkReal x1031=((1.0)*cj5);
IkReal x1032=((1.0)*sj5);
IkReal x1033=(r20*x1023);
IkReal x1034=((1.0)*r02*sj0);
IkReal x1035=(cj2*cj3*sj1);
IkReal x1036=(cj1*cj3*sj2);
CheckValue<IkReal> x1037=IKPowWithIntegerCheck(IKsign((((r20*x1026*x1028))+((r21*x1027))+((r21*x1023*x1028))+((r22*x1029))+((x1024*x1033))+((r21*x1026*x1030))+(((-1.0)*x1023*x1025*x1027))+(((-1.0)*x1024*x1025*x1026))+(((-1.0)*x1025*x1028))+(((-1.0)*r22*x1034))+(((-1.0)*r20*x1026*x1027))+(((-1.0)*x1030*x1033)))),-1);
if(!x1037.valid){
continue;
}
CheckValue<IkReal> x1038 = IKatan2WithCheck(IkReal(((((-1.0)*x1034*x1036))+(((-1.0)*x1034*x1035))+((x1029*x1036))+((x1029*x1035)))),IkReal(((((-1.0)*x1024*x1031*x1035))+(((-1.0)*x1024*x1031*x1036))+(((-1.0)*x1028*x1032*x1036))+(((-1.0)*x1028*x1032*x1035))+((cj5*x1030*x1036))+((cj5*x1030*x1035))+((sj5*x1027*x1036))+((sj5*x1027*x1035)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1037.value)))+(x1038.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1039=IKsin(j4);
IkReal x1040=IKcos(j4);
IkReal x1041=((1.0)*cj2);
IkReal x1042=(cj3*sj1);
IkReal x1043=(cj5*r00);
IkReal x1044=(cj1*cj3);
IkReal x1045=(cj5*r10);
IkReal x1046=(r01*sj5);
IkReal x1047=(cj5*r20);
IkReal x1048=((1.0)*x1040);
IkReal x1049=(cj0*x1039);
IkReal x1050=(sj5*x1040);
IkReal x1051=(sj0*x1040);
IkReal x1052=(sj0*x1039);
IkReal x1053=(sj5*x1052);
evalcond[0]=((((-1.0)*cj1*x1041))+(((-1.0)*r22*x1048))+((sj1*sj2))+(((-1.0)*x1039*x1047))+((r21*sj5*x1039)));
evalcond[1]=(((r22*x1039))+(((-1.0)*sj2*x1044))+(((-1.0)*x1041*x1042))+((r21*x1050))+(((-1.0)*x1047*x1048)));
evalcond[2]=(((r02*x1051))+((x1043*x1052))+(((-1.0)*cj0*r12*x1048))+(((-1.0)*x1045*x1049))+((r11*sj5*x1049))+(((-1.0)*x1046*x1052)));
evalcond[3]=((((-1.0)*sj3))+((x1043*x1051))+(((-1.0)*r02*x1052))+(((-1.0)*cj0*x1045*x1048))+(((-1.0)*sj0*x1046*x1048))+((cj0*r11*x1050))+((r12*x1049)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*cj0*r02*x1048))+((r11*x1053))+((cj1*sj2))+(((-1.0)*x1043*x1049))+(((-1.0)*x1045*x1052))+(((-1.0)*r12*sj0*x1048))+((x1046*x1049)));
evalcond[5]=(((r12*x1052))+((r02*x1049))+(((-1.0)*sj0*x1045*x1048))+((sj2*x1042))+(((-1.0)*x1041*x1044))+(((-1.0)*cj0*x1043*x1048))+((r11*sj0*x1050))+((cj0*x1040*x1046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1054=r21*r21;
IkReal x1055=cj5*cj5;
IkReal x1056=((1.0)*cj1);
IkReal x1057=(cj3*sj2);
IkReal x1058=(r21*sj5);
IkReal x1059=(sj1*sj2);
IkReal x1060=((1.0)*r22);
IkReal x1061=(cj3*sj1);
IkReal x1062=(cj5*r20);
IkReal x1063=(cj2*x1062);
CheckValue<IkReal> x1064=IKPowWithIntegerCheck(IKsign(((((2.0)*x1058*x1062))+((x1054*x1055))+(((-1.0)*r22*x1060))+(((-1.0)*x1054))+(((-1.0)*x1055*(r20*r20))))),-1);
if(!x1064.valid){
continue;
}
CheckValue<IkReal> x1065 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*x1056*x1058))+(((-1.0)*cj2*x1060*x1061))+(((-1.0)*x1059*x1062))+((cj1*x1063))+(((-1.0)*r22*x1056*x1057))+((x1058*x1059)))),IkReal(((((-1.0)*cj2*x1058*x1061))+((x1061*x1063))+(((-1.0)*x1059*x1060))+(((-1.0)*x1056*x1057*x1058))+((cj1*cj2*r22))+((cj1*x1057*x1062)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1064.value)))+(x1065.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1066=IKsin(j4);
IkReal x1067=IKcos(j4);
IkReal x1068=((1.0)*cj2);
IkReal x1069=(cj3*sj1);
IkReal x1070=(cj5*r00);
IkReal x1071=(cj1*cj3);
IkReal x1072=(cj5*r10);
IkReal x1073=(r01*sj5);
IkReal x1074=(cj5*r20);
IkReal x1075=((1.0)*x1067);
IkReal x1076=(cj0*x1066);
IkReal x1077=(sj5*x1067);
IkReal x1078=(sj0*x1067);
IkReal x1079=(sj0*x1066);
IkReal x1080=(sj5*x1079);
evalcond[0]=((((-1.0)*x1066*x1074))+(((-1.0)*r22*x1075))+(((-1.0)*cj1*x1068))+((sj1*sj2))+((r21*sj5*x1066)));
evalcond[1]=((((-1.0)*x1074*x1075))+(((-1.0)*sj2*x1071))+(((-1.0)*x1068*x1069))+((r22*x1066))+((r21*x1077)));
evalcond[2]=(((x1070*x1079))+(((-1.0)*cj0*r12*x1075))+(((-1.0)*x1072*x1076))+(((-1.0)*x1073*x1079))+((r11*sj5*x1076))+((r02*x1078)));
evalcond[3]=((((-1.0)*cj0*x1072*x1075))+(((-1.0)*sj3))+(((-1.0)*r02*x1079))+((r12*x1076))+((x1070*x1078))+(((-1.0)*sj0*x1073*x1075))+((cj0*r11*x1077)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x1070*x1076))+((cj1*sj2))+((r11*x1080))+(((-1.0)*r12*sj0*x1075))+((x1073*x1076))+(((-1.0)*x1072*x1079))+(((-1.0)*cj0*r02*x1075)));
evalcond[5]=((((-1.0)*sj0*x1072*x1075))+((r12*x1079))+((sj2*x1069))+(((-1.0)*cj0*x1070*x1075))+((cj0*x1067*x1073))+(((-1.0)*x1068*x1071))+((r11*sj0*x1077))+((r02*x1076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1081=(cj1*cj2);
IkReal x1082=(cj0*sj5);
IkReal x1083=(cj5*sj0);
IkReal x1084=((1.0)*r11);
IkReal x1085=(r02*sj0);
IkReal x1086=(sj1*sj2);
IkReal x1087=((1.0)*cj0);
IkReal x1088=(cj5*r10);
IkReal x1089=((1.0)*r00);
IkReal x1090=((1.0)*sj0*sj5);
CheckValue<IkReal> x1091 = IKatan2WithCheck(IkReal((((cj0*r12*x1081))+(((-1.0)*x1081*x1085))+(((-1.0)*r12*x1086*x1087))+((x1085*x1086)))),IkReal((((r11*x1081*x1082))+(((-1.0)*x1083*x1086*x1089))+(((-1.0)*x1081*x1087*x1088))+((r01*sj0*sj5*x1086))+(((-1.0)*x1082*x1084*x1086))+((r00*x1081*x1083))+(((-1.0)*r01*x1081*x1090))+((cj0*x1086*x1088)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1091.valid){
continue;
}
CheckValue<IkReal> x1092=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x1090))+(((-1.0)*x1082*x1089))+(((-1.0)*cj5*r01*x1087))+(((-1.0)*x1083*x1084)))),-1);
if(!x1092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1091.value)+(((1.5707963267949)*(x1092.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1093=IKsin(j4);
IkReal x1094=IKcos(j4);
IkReal x1095=((1.0)*cj2);
IkReal x1096=(cj3*sj1);
IkReal x1097=(cj5*r00);
IkReal x1098=(cj1*cj3);
IkReal x1099=(cj5*r10);
IkReal x1100=(r01*sj5);
IkReal x1101=(cj5*r20);
IkReal x1102=((1.0)*x1094);
IkReal x1103=(cj0*x1093);
IkReal x1104=(sj5*x1094);
IkReal x1105=(sj0*x1094);
IkReal x1106=(sj0*x1093);
IkReal x1107=(sj5*x1106);
evalcond[0]=((((-1.0)*r22*x1102))+(((-1.0)*x1093*x1101))+((sj1*sj2))+((r21*sj5*x1093))+(((-1.0)*cj1*x1095)));
evalcond[1]=(((r22*x1093))+(((-1.0)*sj2*x1098))+(((-1.0)*x1095*x1096))+((r21*x1104))+(((-1.0)*x1101*x1102)));
evalcond[2]=(((r02*x1105))+((x1097*x1106))+((r11*sj5*x1103))+(((-1.0)*cj0*r12*x1102))+(((-1.0)*x1100*x1106))+(((-1.0)*x1099*x1103)));
evalcond[3]=((((-1.0)*sj3))+(((-1.0)*r02*x1106))+((x1097*x1105))+(((-1.0)*cj0*x1099*x1102))+((r12*x1103))+(((-1.0)*sj0*x1100*x1102))+((cj0*r11*x1104)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*sj0*x1102))+((cj1*sj2))+(((-1.0)*x1097*x1103))+((x1100*x1103))+(((-1.0)*x1099*x1106))+((r11*x1107))+(((-1.0)*cj0*r02*x1102)));
evalcond[5]=(((r02*x1103))+((r11*sj0*x1104))+(((-1.0)*sj0*x1099*x1102))+(((-1.0)*x1095*x1098))+(((-1.0)*cj0*x1097*x1102))+((cj0*x1094*x1100))+((r12*x1106))+((sj2*x1096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "4b1cf00865181a92fc1b3dc5b1bf5fef"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
